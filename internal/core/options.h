/*
 * Tencent is pleased to support the open source community by making Blueking Container Service available.
 * Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
 * Licensed under the MIT License (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://opensource.org/licenses/MIT
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef _BSCP_CPP_SDK_INTERNAL_CORE_OPTIONS_H_
#define _BSCP_CPP_SDK_INTERNAL_CORE_OPTIONS_H_

#include <map>
#include <string>
#include <vector>

#include <grpcpp/grpcpp.h>

#include "internal/tools/log/log.h"

namespace bscp {

/**
 * @brief ClientOptions bscp cpp sdk client options.
 */
struct ClientOptions
{
public:
    ClientOptions() = default;
    ClientOptions(const ClientOptions& other)
        : m_token(other.m_token), m_bizID(other.m_bizID), m_feedAddrs(other.m_feedAddrs), m_labels(other.m_labels),
          m_uid(other.m_uid), m_dialTimeoutMS(other.m_dialTimeoutMS), m_useFileCache(other.m_useFileCache),
          m_fileCacheDir(other.m_fileCacheDir), m_fingerPrint(other.m_fingerPrint), m_sideRid(other.m_sideRid)
    {
    }

public:
    // token.
    std::string m_token;
    // business id.
    uint32_t m_bizID = 0;
    // feed_server address.
    std::vector<std::string> m_feedAddrs;
    // instance labels.
    std::map<std::string, std::string> m_labels;
    // uid.
    std::string m_uid;
    // dial upstream timeout in millisecond.
    int64_t m_dialTimeoutMS = 0;
    // use file cache.
    bool m_useFileCache = false;
    // file cache directory.
    std::string m_fileCacheDir;
    // finger print, default not filled, generated by sdk.
    std::string m_fingerPrint;
    // side rid.
    std::string m_sideRid;
};

/**
 * @brief AppOptions app options for app pull and watch.
 */
struct AppOptions
{
public:
    // watch config item key.
    std::string m_key;
    // instance labels.
    std::map<std::string, std::string> m_labels;
    // instance unique uid.
    std::string m_uid;
};

/**
 * @brief SetContext set context.
 *
 * @param context grpc client context.
 * @param options client options.
 * @param isHandshake hand shake rpc call flag.
 *
 * @return return 0 if success, non zero if failed.
 */
int SetContext(std::shared_ptr<grpc::ClientContext>& context, const ClientOptions& options, bool isHandshake = false);

} // namespace bscp

#endif // _BSCP_CPP_SDK_INTERNAL_CORE_OPTIONS_H_