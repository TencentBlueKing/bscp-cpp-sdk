// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pkg/protocol/feed-server/feed_server.proto

#include "pkg/protocol/feed-server/feed_server.pb.h"
#include "pkg/protocol/feed-server/feed_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pbfs {

static const char* Upstream_method_names[] = {
  "/pbfs.Upstream/Handshake",
  "/pbfs.Upstream/Messaging",
  "/pbfs.Upstream/Watch",
  "/pbfs.Upstream/PullAppFileMeta",
  "/pbfs.Upstream/GetDownloadURL",
  "/pbfs.Upstream/PullKvMeta",
  "/pbfs.Upstream/GetKvValue",
  "/pbfs.Upstream/ListApps",
};

std::unique_ptr< Upstream::Stub> Upstream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Upstream::Stub> stub(new Upstream::Stub(channel, options));
  return stub;
}

Upstream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Handshake_(Upstream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Messaging_(Upstream_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Watch_(Upstream_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PullAppFileMeta_(Upstream_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDownloadURL_(Upstream_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PullKvMeta_(Upstream_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKvValue_(Upstream_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListApps_(Upstream_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Upstream::Stub::Handshake(::grpc::ClientContext* context, const ::pbfs::HandshakeMessage& request, ::pbfs::HandshakeResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pbfs::HandshakeMessage, ::pbfs::HandshakeResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Handshake_, context, request, response);
}

void Upstream::Stub::async::Handshake(::grpc::ClientContext* context, const ::pbfs::HandshakeMessage* request, ::pbfs::HandshakeResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pbfs::HandshakeMessage, ::pbfs::HandshakeResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, std::move(f));
}

void Upstream::Stub::async::Handshake(::grpc::ClientContext* context, const ::pbfs::HandshakeMessage* request, ::pbfs::HandshakeResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Handshake_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pbfs::HandshakeResp>* Upstream::Stub::PrepareAsyncHandshakeRaw(::grpc::ClientContext* context, const ::pbfs::HandshakeMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pbfs::HandshakeResp, ::pbfs::HandshakeMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Handshake_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pbfs::HandshakeResp>* Upstream::Stub::AsyncHandshakeRaw(::grpc::ClientContext* context, const ::pbfs::HandshakeMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHandshakeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Upstream::Stub::Messaging(::grpc::ClientContext* context, const ::pbfs::MessagingMeta& request, ::pbfs::MessagingResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pbfs::MessagingMeta, ::pbfs::MessagingResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Messaging_, context, request, response);
}

void Upstream::Stub::async::Messaging(::grpc::ClientContext* context, const ::pbfs::MessagingMeta* request, ::pbfs::MessagingResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pbfs::MessagingMeta, ::pbfs::MessagingResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Messaging_, context, request, response, std::move(f));
}

void Upstream::Stub::async::Messaging(::grpc::ClientContext* context, const ::pbfs::MessagingMeta* request, ::pbfs::MessagingResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Messaging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pbfs::MessagingResp>* Upstream::Stub::PrepareAsyncMessagingRaw(::grpc::ClientContext* context, const ::pbfs::MessagingMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pbfs::MessagingResp, ::pbfs::MessagingMeta, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Messaging_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pbfs::MessagingResp>* Upstream::Stub::AsyncMessagingRaw(::grpc::ClientContext* context, const ::pbfs::MessagingMeta& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMessagingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::pbfs::FeedWatchMessage>* Upstream::Stub::WatchRaw(::grpc::ClientContext* context, const ::pbfs::SideWatchMeta& request) {
  return ::grpc::internal::ClientReaderFactory< ::pbfs::FeedWatchMessage>::Create(channel_.get(), rpcmethod_Watch_, context, request);
}

void Upstream::Stub::async::Watch(::grpc::ClientContext* context, const ::pbfs::SideWatchMeta* request, ::grpc::ClientReadReactor< ::pbfs::FeedWatchMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::pbfs::FeedWatchMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pbfs::FeedWatchMessage>* Upstream::Stub::AsyncWatchRaw(::grpc::ClientContext* context, const ::pbfs::SideWatchMeta& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pbfs::FeedWatchMessage>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pbfs::FeedWatchMessage>* Upstream::Stub::PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::pbfs::SideWatchMeta& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pbfs::FeedWatchMessage>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, false, nullptr);
}

::grpc::Status Upstream::Stub::PullAppFileMeta(::grpc::ClientContext* context, const ::pbfs::PullAppFileMetaReq& request, ::pbfs::PullAppFileMetaResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pbfs::PullAppFileMetaReq, ::pbfs::PullAppFileMetaResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PullAppFileMeta_, context, request, response);
}

void Upstream::Stub::async::PullAppFileMeta(::grpc::ClientContext* context, const ::pbfs::PullAppFileMetaReq* request, ::pbfs::PullAppFileMetaResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pbfs::PullAppFileMetaReq, ::pbfs::PullAppFileMetaResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullAppFileMeta_, context, request, response, std::move(f));
}

void Upstream::Stub::async::PullAppFileMeta(::grpc::ClientContext* context, const ::pbfs::PullAppFileMetaReq* request, ::pbfs::PullAppFileMetaResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullAppFileMeta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pbfs::PullAppFileMetaResp>* Upstream::Stub::PrepareAsyncPullAppFileMetaRaw(::grpc::ClientContext* context, const ::pbfs::PullAppFileMetaReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pbfs::PullAppFileMetaResp, ::pbfs::PullAppFileMetaReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PullAppFileMeta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pbfs::PullAppFileMetaResp>* Upstream::Stub::AsyncPullAppFileMetaRaw(::grpc::ClientContext* context, const ::pbfs::PullAppFileMetaReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullAppFileMetaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Upstream::Stub::GetDownloadURL(::grpc::ClientContext* context, const ::pbfs::GetDownloadURLReq& request, ::pbfs::GetDownloadURLResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pbfs::GetDownloadURLReq, ::pbfs::GetDownloadURLResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDownloadURL_, context, request, response);
}

void Upstream::Stub::async::GetDownloadURL(::grpc::ClientContext* context, const ::pbfs::GetDownloadURLReq* request, ::pbfs::GetDownloadURLResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pbfs::GetDownloadURLReq, ::pbfs::GetDownloadURLResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDownloadURL_, context, request, response, std::move(f));
}

void Upstream::Stub::async::GetDownloadURL(::grpc::ClientContext* context, const ::pbfs::GetDownloadURLReq* request, ::pbfs::GetDownloadURLResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDownloadURL_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pbfs::GetDownloadURLResp>* Upstream::Stub::PrepareAsyncGetDownloadURLRaw(::grpc::ClientContext* context, const ::pbfs::GetDownloadURLReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pbfs::GetDownloadURLResp, ::pbfs::GetDownloadURLReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDownloadURL_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pbfs::GetDownloadURLResp>* Upstream::Stub::AsyncGetDownloadURLRaw(::grpc::ClientContext* context, const ::pbfs::GetDownloadURLReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDownloadURLRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Upstream::Stub::PullKvMeta(::grpc::ClientContext* context, const ::pbfs::PullKvMetaReq& request, ::pbfs::PullKvMetaResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pbfs::PullKvMetaReq, ::pbfs::PullKvMetaResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PullKvMeta_, context, request, response);
}

void Upstream::Stub::async::PullKvMeta(::grpc::ClientContext* context, const ::pbfs::PullKvMetaReq* request, ::pbfs::PullKvMetaResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pbfs::PullKvMetaReq, ::pbfs::PullKvMetaResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullKvMeta_, context, request, response, std::move(f));
}

void Upstream::Stub::async::PullKvMeta(::grpc::ClientContext* context, const ::pbfs::PullKvMetaReq* request, ::pbfs::PullKvMetaResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullKvMeta_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pbfs::PullKvMetaResp>* Upstream::Stub::PrepareAsyncPullKvMetaRaw(::grpc::ClientContext* context, const ::pbfs::PullKvMetaReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pbfs::PullKvMetaResp, ::pbfs::PullKvMetaReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PullKvMeta_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pbfs::PullKvMetaResp>* Upstream::Stub::AsyncPullKvMetaRaw(::grpc::ClientContext* context, const ::pbfs::PullKvMetaReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullKvMetaRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Upstream::Stub::GetKvValue(::grpc::ClientContext* context, const ::pbfs::GetKvValueReq& request, ::pbfs::GetKvValueResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pbfs::GetKvValueReq, ::pbfs::GetKvValueResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetKvValue_, context, request, response);
}

void Upstream::Stub::async::GetKvValue(::grpc::ClientContext* context, const ::pbfs::GetKvValueReq* request, ::pbfs::GetKvValueResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pbfs::GetKvValueReq, ::pbfs::GetKvValueResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKvValue_, context, request, response, std::move(f));
}

void Upstream::Stub::async::GetKvValue(::grpc::ClientContext* context, const ::pbfs::GetKvValueReq* request, ::pbfs::GetKvValueResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetKvValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pbfs::GetKvValueResp>* Upstream::Stub::PrepareAsyncGetKvValueRaw(::grpc::ClientContext* context, const ::pbfs::GetKvValueReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pbfs::GetKvValueResp, ::pbfs::GetKvValueReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetKvValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pbfs::GetKvValueResp>* Upstream::Stub::AsyncGetKvValueRaw(::grpc::ClientContext* context, const ::pbfs::GetKvValueReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetKvValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Upstream::Stub::ListApps(::grpc::ClientContext* context, const ::pbfs::ListAppsReq& request, ::pbfs::ListAppsResp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pbfs::ListAppsReq, ::pbfs::ListAppsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListApps_, context, request, response);
}

void Upstream::Stub::async::ListApps(::grpc::ClientContext* context, const ::pbfs::ListAppsReq* request, ::pbfs::ListAppsResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pbfs::ListAppsReq, ::pbfs::ListAppsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, std::move(f));
}

void Upstream::Stub::async::ListApps(::grpc::ClientContext* context, const ::pbfs::ListAppsReq* request, ::pbfs::ListAppsResp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListApps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pbfs::ListAppsResp>* Upstream::Stub::PrepareAsyncListAppsRaw(::grpc::ClientContext* context, const ::pbfs::ListAppsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pbfs::ListAppsResp, ::pbfs::ListAppsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListApps_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pbfs::ListAppsResp>* Upstream::Stub::AsyncListAppsRaw(::grpc::ClientContext* context, const ::pbfs::ListAppsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListAppsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Upstream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Upstream_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Upstream::Service, ::pbfs::HandshakeMessage, ::pbfs::HandshakeResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Upstream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbfs::HandshakeMessage* req,
             ::pbfs::HandshakeResp* resp) {
               return service->Handshake(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Upstream_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Upstream::Service, ::pbfs::MessagingMeta, ::pbfs::MessagingResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Upstream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbfs::MessagingMeta* req,
             ::pbfs::MessagingResp* resp) {
               return service->Messaging(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Upstream_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Upstream::Service, ::pbfs::SideWatchMeta, ::pbfs::FeedWatchMessage>(
          [](Upstream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbfs::SideWatchMeta* req,
             ::grpc::ServerWriter<::pbfs::FeedWatchMessage>* writer) {
               return service->Watch(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Upstream_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Upstream::Service, ::pbfs::PullAppFileMetaReq, ::pbfs::PullAppFileMetaResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Upstream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbfs::PullAppFileMetaReq* req,
             ::pbfs::PullAppFileMetaResp* resp) {
               return service->PullAppFileMeta(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Upstream_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Upstream::Service, ::pbfs::GetDownloadURLReq, ::pbfs::GetDownloadURLResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Upstream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbfs::GetDownloadURLReq* req,
             ::pbfs::GetDownloadURLResp* resp) {
               return service->GetDownloadURL(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Upstream_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Upstream::Service, ::pbfs::PullKvMetaReq, ::pbfs::PullKvMetaResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Upstream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbfs::PullKvMetaReq* req,
             ::pbfs::PullKvMetaResp* resp) {
               return service->PullKvMeta(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Upstream_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Upstream::Service, ::pbfs::GetKvValueReq, ::pbfs::GetKvValueResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Upstream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbfs::GetKvValueReq* req,
             ::pbfs::GetKvValueResp* resp) {
               return service->GetKvValue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Upstream_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Upstream::Service, ::pbfs::ListAppsReq, ::pbfs::ListAppsResp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Upstream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pbfs::ListAppsReq* req,
             ::pbfs::ListAppsResp* resp) {
               return service->ListApps(ctx, req, resp);
             }, this)));
}

Upstream::Service::~Service() {
}

::grpc::Status Upstream::Service::Handshake(::grpc::ServerContext* context, const ::pbfs::HandshakeMessage* request, ::pbfs::HandshakeResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Upstream::Service::Messaging(::grpc::ServerContext* context, const ::pbfs::MessagingMeta* request, ::pbfs::MessagingResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Upstream::Service::Watch(::grpc::ServerContext* context, const ::pbfs::SideWatchMeta* request, ::grpc::ServerWriter< ::pbfs::FeedWatchMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Upstream::Service::PullAppFileMeta(::grpc::ServerContext* context, const ::pbfs::PullAppFileMetaReq* request, ::pbfs::PullAppFileMetaResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Upstream::Service::GetDownloadURL(::grpc::ServerContext* context, const ::pbfs::GetDownloadURLReq* request, ::pbfs::GetDownloadURLResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Upstream::Service::PullKvMeta(::grpc::ServerContext* context, const ::pbfs::PullKvMetaReq* request, ::pbfs::PullKvMetaResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Upstream::Service::GetKvValue(::grpc::ServerContext* context, const ::pbfs::GetKvValueReq* request, ::pbfs::GetKvValueResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Upstream::Service::ListApps(::grpc::ServerContext* context, const ::pbfs::ListAppsReq* request, ::pbfs::ListAppsResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pbfs

