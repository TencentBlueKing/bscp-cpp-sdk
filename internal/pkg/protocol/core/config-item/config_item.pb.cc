// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/protocol/core/config-item/config_item.proto

#include "pkg/protocol/core/config-item/config_item.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pbci {
constexpr ConfigItem::ConfigItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spec_(nullptr)
  , commit_spec_(nullptr)
  , attachment_(nullptr)
  , revision_(nullptr)
  , id_(0u)
  , config_item_id_(0u){}
struct ConfigItemDefaultTypeInternal {
  constexpr ConfigItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigItemDefaultTypeInternal() {}
  union {
    ConfigItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigItemDefaultTypeInternal _ConfigItem_default_instance_;
constexpr ConfigItemSpec::ConfigItemSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_mode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , permission_(nullptr){}
struct ConfigItemSpecDefaultTypeInternal {
  constexpr ConfigItemSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigItemSpecDefaultTypeInternal() {}
  union {
    ConfigItemSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigItemSpecDefaultTypeInternal _ConfigItemSpec_default_instance_;
constexpr ConfigItemAttachment::ConfigItemAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : biz_id_(0u)
  , app_id_(0u){}
struct ConfigItemAttachmentDefaultTypeInternal {
  constexpr ConfigItemAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigItemAttachmentDefaultTypeInternal() {}
  union {
    ConfigItemAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigItemAttachmentDefaultTypeInternal _ConfigItemAttachment_default_instance_;
constexpr FilePermission::FilePermission(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , privilege_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FilePermissionDefaultTypeInternal {
  constexpr FilePermissionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilePermissionDefaultTypeInternal() {}
  union {
    FilePermission _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilePermissionDefaultTypeInternal _FilePermission_default_instance_;
constexpr ListConfigItemCounts::ListConfigItemCounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : update_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u)
  , count_(0u){}
struct ListConfigItemCountsDefaultTypeInternal {
  constexpr ListConfigItemCountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListConfigItemCountsDefaultTypeInternal() {}
  union {
    ListConfigItemCounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListConfigItemCountsDefaultTypeInternal _ListConfigItemCounts_default_instance_;
}  // namespace pbci
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto = nullptr;

const uint32_t TableStruct_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItem, id_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItem, config_item_id_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItem, file_state_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItem, spec_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItem, commit_spec_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItem, attachment_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItem, revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemSpec, name_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemSpec, path_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemSpec, file_type_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemSpec, file_mode_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemSpec, memo_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemSpec, permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemAttachment, biz_id_),
  PROTOBUF_FIELD_OFFSET(::pbci::ConfigItemAttachment, app_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbci::FilePermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbci::FilePermission, user_),
  PROTOBUF_FIELD_OFFSET(::pbci::FilePermission, user_group_),
  PROTOBUF_FIELD_OFFSET(::pbci::FilePermission, privilege_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbci::ListConfigItemCounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbci::ListConfigItemCounts, app_id_),
  PROTOBUF_FIELD_OFFSET(::pbci::ListConfigItemCounts, count_),
  PROTOBUF_FIELD_OFFSET(::pbci::ListConfigItemCounts, update_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pbci::ConfigItem)},
  { 13, -1, -1, sizeof(::pbci::ConfigItemSpec)},
  { 25, -1, -1, sizeof(::pbci::ConfigItemAttachment)},
  { 33, -1, -1, sizeof(::pbci::FilePermission)},
  { 42, -1, -1, sizeof(::pbci::ListConfigItemCounts)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbci::_ConfigItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbci::_ConfigItemSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbci::_ConfigItemAttachment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbci::_FilePermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbci::_ListConfigItemCounts_default_instance_),
};

const char descriptor_table_protodef_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/pkg/protocol/core/config-item/config_i"
  "tem.proto\022\004pbci\032!pkg/protocol/core/base/"
  "base.proto\032%pkg/protocol/core/commit/com"
  "mit.proto\"\347\001\n\nConfigItem\022\n\n\002id\030\001 \001(\r\022\026\n\016"
  "config_item_id\030\002 \001(\r\022\022\n\nfile_state\030\003 \001(\t"
  "\022\"\n\004spec\030\004 \001(\0132\024.pbci.ConfigItemSpec\022)\n\013"
  "commit_spec\030\005 \001(\0132\024.pbcommit.CommitSpec\022"
  ".\n\nattachment\030\006 \001(\0132\032.pbci.ConfigItemAtt"
  "achment\022\"\n\010revision\030\007 \001(\0132\020.pbbase.Revis"
  "ion\"\212\001\n\016ConfigItemSpec\022\014\n\004name\030\001 \001(\t\022\014\n\004"
  "path\030\002 \001(\t\022\021\n\tfile_type\030\003 \001(\t\022\021\n\tfile_mo"
  "de\030\004 \001(\t\022\014\n\004memo\030\005 \001(\t\022(\n\npermission\030\006 \001"
  "(\0132\024.pbci.FilePermission\"6\n\024ConfigItemAt"
  "tachment\022\016\n\006biz_id\030\001 \001(\r\022\016\n\006app_id\030\002 \001(\r"
  "\"E\n\016FilePermission\022\014\n\004user\030\001 \001(\t\022\022\n\nuser"
  "_group\030\002 \001(\t\022\021\n\tprivilege\030\003 \001(\t\"H\n\024ListC"
  "onfigItemCounts\022\016\n\006app_id\030\001 \001(\r\022\r\n\005count"
  "\030\002 \001(\r\022\021\n\tupdate_at\030\003 \001(\tB\\ZZgithub.com/"
  "TencentBlueKing/bk-bcs/bcs-services/bcs-"
  "bscp/pkg/protocol/core/config-item;pbcib"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_deps[2] = {
  &::descriptor_table_pkg_2fprotocol_2fcore_2fbase_2fbase_2eproto,
  &::descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto = {
  false, false, 807, descriptor_table_protodef_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto, "pkg/protocol/core/config-item/config_item.proto", 
  &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_once, descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto::offsets,
  file_level_metadata_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto, file_level_enum_descriptors_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto, file_level_service_descriptors_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_getter() {
  return &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto(&descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto);
namespace pbci {

// ===================================================================

class ConfigItem::_Internal {
 public:
  static const ::pbci::ConfigItemSpec& spec(const ConfigItem* msg);
  static const ::pbcommit::CommitSpec& commit_spec(const ConfigItem* msg);
  static const ::pbci::ConfigItemAttachment& attachment(const ConfigItem* msg);
  static const ::pbbase::Revision& revision(const ConfigItem* msg);
};

const ::pbci::ConfigItemSpec&
ConfigItem::_Internal::spec(const ConfigItem* msg) {
  return *msg->spec_;
}
const ::pbcommit::CommitSpec&
ConfigItem::_Internal::commit_spec(const ConfigItem* msg) {
  return *msg->commit_spec_;
}
const ::pbci::ConfigItemAttachment&
ConfigItem::_Internal::attachment(const ConfigItem* msg) {
  return *msg->attachment_;
}
const ::pbbase::Revision&
ConfigItem::_Internal::revision(const ConfigItem* msg) {
  return *msg->revision_;
}
void ConfigItem::clear_commit_spec() {
  if (GetArenaForAllocation() == nullptr && commit_spec_ != nullptr) {
    delete commit_spec_;
  }
  commit_spec_ = nullptr;
}
void ConfigItem::clear_revision() {
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
ConfigItem::ConfigItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbci.ConfigItem)
}
ConfigItem::ConfigItem(const ConfigItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_state().empty()) {
    file_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_state(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    spec_ = new ::pbci::ConfigItemSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_commit_spec()) {
    commit_spec_ = new ::pbcommit::CommitSpec(*from.commit_spec_);
  } else {
    commit_spec_ = nullptr;
  }
  if (from._internal_has_attachment()) {
    attachment_ = new ::pbci::ConfigItemAttachment(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  if (from._internal_has_revision()) {
    revision_ = new ::pbbase::Revision(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_item_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(config_item_id_));
  // @@protoc_insertion_point(copy_constructor:pbci.ConfigItem)
}

inline void ConfigItem::SharedCtor() {
file_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&config_item_id_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(config_item_id_));
}

ConfigItem::~ConfigItem() {
  // @@protoc_insertion_point(destructor:pbci.ConfigItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete commit_spec_;
  if (this != internal_default_instance()) delete attachment_;
  if (this != internal_default_instance()) delete revision_;
}

void ConfigItem::ArenaDtor(void* object) {
  ConfigItem* _this = reinterpret_cast< ConfigItem* >(object);
  (void)_this;
}
void ConfigItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigItem::Clear() {
// @@protoc_insertion_point(message_clear_start:pbci.ConfigItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_state_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && commit_spec_ != nullptr) {
    delete commit_spec_;
  }
  commit_spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_item_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(config_item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 config_item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          config_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.ConfigItem.file_state"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbci.ConfigItemSpec spec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbcommit.CommitSpec commit_spec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbci.ConfigItemAttachment attachment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbbase.Revision revision = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbci.ConfigItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 config_item_id = 2;
  if (this->_internal_config_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_config_item_id(), target);
  }

  // string file_state = 3;
  if (!this->_internal_file_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_state().data(), static_cast<int>(this->_internal_file_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.ConfigItem.file_state");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_state(), target);
  }

  // .pbci.ConfigItemSpec spec = 4;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::spec(this), target, stream);
  }

  // .pbcommit.CommitSpec commit_spec = 5;
  if (this->_internal_has_commit_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::commit_spec(this), target, stream);
  }

  // .pbci.ConfigItemAttachment attachment = 6;
  if (this->_internal_has_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::attachment(this), target, stream);
  }

  // .pbbase.Revision revision = 7;
  if (this->_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::revision(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbci.ConfigItem)
  return target;
}

size_t ConfigItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbci.ConfigItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_state = 3;
  if (!this->_internal_file_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_state());
  }

  // .pbci.ConfigItemSpec spec = 4;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .pbcommit.CommitSpec commit_spec = 5;
  if (this->_internal_has_commit_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_spec_);
  }

  // .pbci.ConfigItemAttachment attachment = 6;
  if (this->_internal_has_attachment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attachment_);
  }

  // .pbbase.Revision revision = 7;
  if (this->_internal_has_revision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 config_item_id = 2;
  if (this->_internal_config_item_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_config_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigItem::GetClassData() const { return &_class_data_; }

void ConfigItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigItem *>(to)->MergeFrom(
      static_cast<const ConfigItem &>(from));
}


void ConfigItem::MergeFrom(const ConfigItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbci.ConfigItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_state().empty()) {
    _internal_set_file_state(from._internal_file_state());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::pbci::ConfigItemSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_commit_spec()) {
    _internal_mutable_commit_spec()->::pbcommit::CommitSpec::MergeFrom(from._internal_commit_spec());
  }
  if (from._internal_has_attachment()) {
    _internal_mutable_attachment()->::pbci::ConfigItemAttachment::MergeFrom(from._internal_attachment());
  }
  if (from._internal_has_revision()) {
    _internal_mutable_revision()->::pbbase::Revision::MergeFrom(from._internal_revision());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_config_item_id() != 0) {
    _internal_set_config_item_id(from._internal_config_item_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigItem::CopyFrom(const ConfigItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbci.ConfigItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigItem::IsInitialized() const {
  return true;
}

void ConfigItem::InternalSwap(ConfigItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_state_, lhs_arena,
      &other->file_state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigItem, config_item_id_)
      + sizeof(ConfigItem::config_item_id_)
      - PROTOBUF_FIELD_OFFSET(ConfigItem, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto[0]);
}

// ===================================================================

class ConfigItemSpec::_Internal {
 public:
  static const ::pbci::FilePermission& permission(const ConfigItemSpec* msg);
};

const ::pbci::FilePermission&
ConfigItemSpec::_Internal::permission(const ConfigItemSpec* msg) {
  return *msg->permission_;
}
ConfigItemSpec::ConfigItemSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbci.ConfigItemSpec)
}
ConfigItemSpec::ConfigItemSpec(const ConfigItemSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_type().empty()) {
    file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_type(), 
      GetArenaForAllocation());
  }
  file_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_mode().empty()) {
    file_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_mode(), 
      GetArenaForAllocation());
  }
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_permission()) {
    permission_ = new ::pbci::FilePermission(*from.permission_);
  } else {
    permission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pbci.ConfigItemSpec)
}

inline void ConfigItemSpec::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
permission_ = nullptr;
}

ConfigItemSpec::~ConfigItemSpec() {
  // @@protoc_insertion_point(destructor:pbci.ConfigItemSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigItemSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete permission_;
}

void ConfigItemSpec::ArenaDtor(void* object) {
  ConfigItemSpec* _this = reinterpret_cast< ConfigItemSpec* >(object);
  (void)_this;
}
void ConfigItemSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigItemSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigItemSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:pbci.ConfigItemSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  file_type_.ClearToEmpty();
  file_mode_.ClearToEmpty();
  memo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigItemSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.ConfigItemSpec.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.ConfigItemSpec.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.ConfigItemSpec.file_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_file_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.ConfigItemSpec.file_mode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.ConfigItemSpec.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbci.FilePermission permission = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_permission(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigItemSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbci.ConfigItemSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.ConfigItemSpec.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.ConfigItemSpec.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string file_type = 3;
  if (!this->_internal_file_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_type().data(), static_cast<int>(this->_internal_file_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.ConfigItemSpec.file_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_type(), target);
  }

  // string file_mode = 4;
  if (!this->_internal_file_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_mode().data(), static_cast<int>(this->_internal_file_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.ConfigItemSpec.file_mode");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_mode(), target);
  }

  // string memo = 5;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.ConfigItemSpec.memo");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_memo(), target);
  }

  // .pbci.FilePermission permission = 6;
  if (this->_internal_has_permission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::permission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbci.ConfigItemSpec)
  return target;
}

size_t ConfigItemSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbci.ConfigItemSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string file_type = 3;
  if (!this->_internal_file_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_type());
  }

  // string file_mode = 4;
  if (!this->_internal_file_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_mode());
  }

  // string memo = 5;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // .pbci.FilePermission permission = 6;
  if (this->_internal_has_permission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *permission_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigItemSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigItemSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigItemSpec::GetClassData() const { return &_class_data_; }

void ConfigItemSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigItemSpec *>(to)->MergeFrom(
      static_cast<const ConfigItemSpec &>(from));
}


void ConfigItemSpec::MergeFrom(const ConfigItemSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbci.ConfigItemSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (!from._internal_file_type().empty()) {
    _internal_set_file_type(from._internal_file_type());
  }
  if (!from._internal_file_mode().empty()) {
    _internal_set_file_mode(from._internal_file_mode());
  }
  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_has_permission()) {
    _internal_mutable_permission()->::pbci::FilePermission::MergeFrom(from._internal_permission());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigItemSpec::CopyFrom(const ConfigItemSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbci.ConfigItemSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigItemSpec::IsInitialized() const {
  return true;
}

void ConfigItemSpec::InternalSwap(ConfigItemSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_type_, lhs_arena,
      &other->file_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_mode_, lhs_arena,
      &other->file_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  swap(permission_, other->permission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigItemSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto[1]);
}

// ===================================================================

class ConfigItemAttachment::_Internal {
 public:
};

ConfigItemAttachment::ConfigItemAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbci.ConfigItemAttachment)
}
ConfigItemAttachment::ConfigItemAttachment(const ConfigItemAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&biz_id_, &from.biz_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&biz_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:pbci.ConfigItemAttachment)
}

inline void ConfigItemAttachment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&biz_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&biz_id_)) + sizeof(app_id_));
}

ConfigItemAttachment::~ConfigItemAttachment() {
  // @@protoc_insertion_point(destructor:pbci.ConfigItemAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigItemAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConfigItemAttachment::ArenaDtor(void* object) {
  ConfigItemAttachment* _this = reinterpret_cast< ConfigItemAttachment* >(object);
  (void)_this;
}
void ConfigItemAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigItemAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigItemAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:pbci.ConfigItemAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&biz_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&biz_id_)) + sizeof(app_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigItemAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 biz_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          biz_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigItemAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbci.ConfigItemAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 biz_id = 1;
  if (this->_internal_biz_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_biz_id(), target);
  }

  // uint32 app_id = 2;
  if (this->_internal_app_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbci.ConfigItemAttachment)
  return target;
}

size_t ConfigItemAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbci.ConfigItemAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 biz_id = 1;
  if (this->_internal_biz_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_biz_id());
  }

  // uint32 app_id = 2;
  if (this->_internal_app_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigItemAttachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigItemAttachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigItemAttachment::GetClassData() const { return &_class_data_; }

void ConfigItemAttachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigItemAttachment *>(to)->MergeFrom(
      static_cast<const ConfigItemAttachment &>(from));
}


void ConfigItemAttachment::MergeFrom(const ConfigItemAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbci.ConfigItemAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_biz_id() != 0) {
    _internal_set_biz_id(from._internal_biz_id());
  }
  if (from._internal_app_id() != 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigItemAttachment::CopyFrom(const ConfigItemAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbci.ConfigItemAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigItemAttachment::IsInitialized() const {
  return true;
}

void ConfigItemAttachment::InternalSwap(ConfigItemAttachment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigItemAttachment, app_id_)
      + sizeof(ConfigItemAttachment::app_id_)
      - PROTOBUF_FIELD_OFFSET(ConfigItemAttachment, biz_id_)>(
          reinterpret_cast<char*>(&biz_id_),
          reinterpret_cast<char*>(&other->biz_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigItemAttachment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto[2]);
}

// ===================================================================

class FilePermission::_Internal {
 public:
};

FilePermission::FilePermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbci.FilePermission)
}
FilePermission::FilePermission(const FilePermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user(), 
      GetArenaForAllocation());
  }
  user_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_group().empty()) {
    user_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_group(), 
      GetArenaForAllocation());
  }
  privilege_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    privilege_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_privilege().empty()) {
    privilege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_privilege(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pbci.FilePermission)
}

inline void FilePermission::SharedCtor() {
user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
privilege_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  privilege_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FilePermission::~FilePermission() {
  // @@protoc_insertion_point(destructor:pbci.FilePermission)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FilePermission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  privilege_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilePermission::ArenaDtor(void* object) {
  FilePermission* _this = reinterpret_cast< FilePermission* >(object);
  (void)_this;
}
void FilePermission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilePermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilePermission::Clear() {
// @@protoc_insertion_point(message_clear_start:pbci.FilePermission)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmpty();
  user_group_.ClearToEmpty();
  privilege_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilePermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.FilePermission.user"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_group();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.FilePermission.user_group"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string privilege = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_privilege();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.FilePermission.privilege"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilePermission::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbci.FilePermission)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user().data(), static_cast<int>(this->_internal_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.FilePermission.user");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user(), target);
  }

  // string user_group = 2;
  if (!this->_internal_user_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_group().data(), static_cast<int>(this->_internal_user_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.FilePermission.user_group");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_group(), target);
  }

  // string privilege = 3;
  if (!this->_internal_privilege().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_privilege().data(), static_cast<int>(this->_internal_privilege().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.FilePermission.privilege");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_privilege(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbci.FilePermission)
  return target;
}

size_t FilePermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbci.FilePermission)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user());
  }

  // string user_group = 2;
  if (!this->_internal_user_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_group());
  }

  // string privilege = 3;
  if (!this->_internal_privilege().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_privilege());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilePermission::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FilePermission::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilePermission::GetClassData() const { return &_class_data_; }

void FilePermission::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FilePermission *>(to)->MergeFrom(
      static_cast<const FilePermission &>(from));
}


void FilePermission::MergeFrom(const FilePermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbci.FilePermission)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _internal_set_user(from._internal_user());
  }
  if (!from._internal_user_group().empty()) {
    _internal_set_user_group(from._internal_user_group());
  }
  if (!from._internal_privilege().empty()) {
    _internal_set_privilege(from._internal_privilege());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilePermission::CopyFrom(const FilePermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbci.FilePermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePermission::IsInitialized() const {
  return true;
}

void FilePermission::InternalSwap(FilePermission* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_, lhs_arena,
      &other->user_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_group_, lhs_arena,
      &other->user_group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &privilege_, lhs_arena,
      &other->privilege_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FilePermission::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto[3]);
}

// ===================================================================

class ListConfigItemCounts::_Internal {
 public:
};

ListConfigItemCounts::ListConfigItemCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbci.ListConfigItemCounts)
}
ListConfigItemCounts::ListConfigItemCounts(const ListConfigItemCounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  update_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    update_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_update_at().empty()) {
    update_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_update_at(), 
      GetArenaForAllocation());
  }
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:pbci.ListConfigItemCounts)
}

inline void ListConfigItemCounts::SharedCtor() {
update_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  update_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(count_));
}

ListConfigItemCounts::~ListConfigItemCounts() {
  // @@protoc_insertion_point(destructor:pbci.ListConfigItemCounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListConfigItemCounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  update_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListConfigItemCounts::ArenaDtor(void* object) {
  ListConfigItemCounts* _this = reinterpret_cast< ListConfigItemCounts* >(object);
  (void)_this;
}
void ListConfigItemCounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListConfigItemCounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListConfigItemCounts::Clear() {
// @@protoc_insertion_point(message_clear_start:pbci.ListConfigItemCounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_at_.ClearToEmpty();
  ::memset(&app_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&app_id_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListConfigItemCounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string update_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_update_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbci.ListConfigItemCounts.update_at"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListConfigItemCounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbci.ListConfigItemCounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 app_id = 1;
  if (this->_internal_app_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // string update_at = 3;
  if (!this->_internal_update_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_at().data(), static_cast<int>(this->_internal_update_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbci.ListConfigItemCounts.update_at");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_update_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbci.ListConfigItemCounts)
  return target;
}

size_t ListConfigItemCounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbci.ListConfigItemCounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string update_at = 3;
  if (!this->_internal_update_at().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_at());
  }

  // uint32 app_id = 1;
  if (this->_internal_app_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  // uint32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListConfigItemCounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListConfigItemCounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListConfigItemCounts::GetClassData() const { return &_class_data_; }

void ListConfigItemCounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListConfigItemCounts *>(to)->MergeFrom(
      static_cast<const ListConfigItemCounts &>(from));
}


void ListConfigItemCounts::MergeFrom(const ListConfigItemCounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbci.ListConfigItemCounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_update_at().empty()) {
    _internal_set_update_at(from._internal_update_at());
  }
  if (from._internal_app_id() != 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListConfigItemCounts::CopyFrom(const ListConfigItemCounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbci.ListConfigItemCounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListConfigItemCounts::IsInitialized() const {
  return true;
}

void ListConfigItemCounts::InternalSwap(ListConfigItemCounts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &update_at_, lhs_arena,
      &other->update_at_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListConfigItemCounts, count_)
      + sizeof(ListConfigItemCounts::count_)
      - PROTOBUF_FIELD_OFFSET(ListConfigItemCounts, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListConfigItemCounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbci
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbci::ConfigItem* Arena::CreateMaybeMessage< ::pbci::ConfigItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbci::ConfigItem >(arena);
}
template<> PROTOBUF_NOINLINE ::pbci::ConfigItemSpec* Arena::CreateMaybeMessage< ::pbci::ConfigItemSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbci::ConfigItemSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::pbci::ConfigItemAttachment* Arena::CreateMaybeMessage< ::pbci::ConfigItemAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbci::ConfigItemAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::pbci::FilePermission* Arena::CreateMaybeMessage< ::pbci::FilePermission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbci::FilePermission >(arena);
}
template<> PROTOBUF_NOINLINE ::pbci::ListConfigItemCounts* Arena::CreateMaybeMessage< ::pbci::ListConfigItemCounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbci::ListConfigItemCounts >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
