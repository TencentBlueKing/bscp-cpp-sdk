// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/protocol/core/config-item/config_item.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pkg/protocol/core/base/base.pb.h"
#include "pkg/protocol/core/commit/commit.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto;
namespace pbci {
class ConfigItem;
struct ConfigItemDefaultTypeInternal;
extern ConfigItemDefaultTypeInternal _ConfigItem_default_instance_;
class ConfigItemAttachment;
struct ConfigItemAttachmentDefaultTypeInternal;
extern ConfigItemAttachmentDefaultTypeInternal _ConfigItemAttachment_default_instance_;
class ConfigItemSpec;
struct ConfigItemSpecDefaultTypeInternal;
extern ConfigItemSpecDefaultTypeInternal _ConfigItemSpec_default_instance_;
class FilePermission;
struct FilePermissionDefaultTypeInternal;
extern FilePermissionDefaultTypeInternal _FilePermission_default_instance_;
class ListConfigItemCounts;
struct ListConfigItemCountsDefaultTypeInternal;
extern ListConfigItemCountsDefaultTypeInternal _ListConfigItemCounts_default_instance_;
}  // namespace pbci
PROTOBUF_NAMESPACE_OPEN
template<> ::pbci::ConfigItem* Arena::CreateMaybeMessage<::pbci::ConfigItem>(Arena*);
template<> ::pbci::ConfigItemAttachment* Arena::CreateMaybeMessage<::pbci::ConfigItemAttachment>(Arena*);
template<> ::pbci::ConfigItemSpec* Arena::CreateMaybeMessage<::pbci::ConfigItemSpec>(Arena*);
template<> ::pbci::FilePermission* Arena::CreateMaybeMessage<::pbci::FilePermission>(Arena*);
template<> ::pbci::ListConfigItemCounts* Arena::CreateMaybeMessage<::pbci::ListConfigItemCounts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbci {

// ===================================================================

class ConfigItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbci.ConfigItem) */ {
 public:
  inline ConfigItem() : ConfigItem(nullptr) {}
  ~ConfigItem() override;
  explicit constexpr ConfigItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigItem(const ConfigItem& from);
  ConfigItem(ConfigItem&& from) noexcept
    : ConfigItem() {
    *this = ::std::move(from);
  }

  inline ConfigItem& operator=(const ConfigItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigItem& operator=(ConfigItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigItem* internal_default_instance() {
    return reinterpret_cast<const ConfigItem*>(
               &_ConfigItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigItem& a, ConfigItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbci.ConfigItem";
  }
  protected:
  explicit ConfigItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileStateFieldNumber = 3,
    kSpecFieldNumber = 4,
    kCommitSpecFieldNumber = 5,
    kAttachmentFieldNumber = 6,
    kRevisionFieldNumber = 7,
    kIdFieldNumber = 1,
    kConfigItemIdFieldNumber = 2,
  };
  // string file_state = 3;
  void clear_file_state();
  const std::string& file_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_state();
  PROTOBUF_NODISCARD std::string* release_file_state();
  void set_allocated_file_state(std::string* file_state);
  private:
  const std::string& _internal_file_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_state(const std::string& value);
  std::string* _internal_mutable_file_state();
  public:

  // .pbci.ConfigItemSpec spec = 4;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::pbci::ConfigItemSpec& spec() const;
  PROTOBUF_NODISCARD ::pbci::ConfigItemSpec* release_spec();
  ::pbci::ConfigItemSpec* mutable_spec();
  void set_allocated_spec(::pbci::ConfigItemSpec* spec);
  private:
  const ::pbci::ConfigItemSpec& _internal_spec() const;
  ::pbci::ConfigItemSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::pbci::ConfigItemSpec* spec);
  ::pbci::ConfigItemSpec* unsafe_arena_release_spec();

  // .pbcommit.CommitSpec commit_spec = 5;
  bool has_commit_spec() const;
  private:
  bool _internal_has_commit_spec() const;
  public:
  void clear_commit_spec();
  const ::pbcommit::CommitSpec& commit_spec() const;
  PROTOBUF_NODISCARD ::pbcommit::CommitSpec* release_commit_spec();
  ::pbcommit::CommitSpec* mutable_commit_spec();
  void set_allocated_commit_spec(::pbcommit::CommitSpec* commit_spec);
  private:
  const ::pbcommit::CommitSpec& _internal_commit_spec() const;
  ::pbcommit::CommitSpec* _internal_mutable_commit_spec();
  public:
  void unsafe_arena_set_allocated_commit_spec(
      ::pbcommit::CommitSpec* commit_spec);
  ::pbcommit::CommitSpec* unsafe_arena_release_commit_spec();

  // .pbci.ConfigItemAttachment attachment = 6;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::pbci::ConfigItemAttachment& attachment() const;
  PROTOBUF_NODISCARD ::pbci::ConfigItemAttachment* release_attachment();
  ::pbci::ConfigItemAttachment* mutable_attachment();
  void set_allocated_attachment(::pbci::ConfigItemAttachment* attachment);
  private:
  const ::pbci::ConfigItemAttachment& _internal_attachment() const;
  ::pbci::ConfigItemAttachment* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::pbci::ConfigItemAttachment* attachment);
  ::pbci::ConfigItemAttachment* unsafe_arena_release_attachment();

  // .pbbase.Revision revision = 7;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const ::pbbase::Revision& revision() const;
  PROTOBUF_NODISCARD ::pbbase::Revision* release_revision();
  ::pbbase::Revision* mutable_revision();
  void set_allocated_revision(::pbbase::Revision* revision);
  private:
  const ::pbbase::Revision& _internal_revision() const;
  ::pbbase::Revision* _internal_mutable_revision();
  public:
  void unsafe_arena_set_allocated_revision(
      ::pbbase::Revision* revision);
  ::pbbase::Revision* unsafe_arena_release_revision();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 config_item_id = 2;
  void clear_config_item_id();
  uint32_t config_item_id() const;
  void set_config_item_id(uint32_t value);
  private:
  uint32_t _internal_config_item_id() const;
  void _internal_set_config_item_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbci.ConfigItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_state_;
  ::pbci::ConfigItemSpec* spec_;
  ::pbcommit::CommitSpec* commit_spec_;
  ::pbci::ConfigItemAttachment* attachment_;
  ::pbbase::Revision* revision_;
  uint32_t id_;
  uint32_t config_item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto;
};
// -------------------------------------------------------------------

class ConfigItemSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbci.ConfigItemSpec) */ {
 public:
  inline ConfigItemSpec() : ConfigItemSpec(nullptr) {}
  ~ConfigItemSpec() override;
  explicit constexpr ConfigItemSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigItemSpec(const ConfigItemSpec& from);
  ConfigItemSpec(ConfigItemSpec&& from) noexcept
    : ConfigItemSpec() {
    *this = ::std::move(from);
  }

  inline ConfigItemSpec& operator=(const ConfigItemSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigItemSpec& operator=(ConfigItemSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigItemSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigItemSpec* internal_default_instance() {
    return reinterpret_cast<const ConfigItemSpec*>(
               &_ConfigItemSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigItemSpec& a, ConfigItemSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigItemSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigItemSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigItemSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigItemSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigItemSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigItemSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigItemSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbci.ConfigItemSpec";
  }
  protected:
  explicit ConfigItemSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kFileTypeFieldNumber = 3,
    kFileModeFieldNumber = 4,
    kMemoFieldNumber = 5,
    kPermissionFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string file_type = 3;
  void clear_file_type();
  const std::string& file_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_type();
  PROTOBUF_NODISCARD std::string* release_file_type();
  void set_allocated_file_type(std::string* file_type);
  private:
  const std::string& _internal_file_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_type(const std::string& value);
  std::string* _internal_mutable_file_type();
  public:

  // string file_mode = 4;
  void clear_file_mode();
  const std::string& file_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_mode();
  PROTOBUF_NODISCARD std::string* release_file_mode();
  void set_allocated_file_mode(std::string* file_mode);
  private:
  const std::string& _internal_file_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_mode(const std::string& value);
  std::string* _internal_mutable_file_mode();
  public:

  // string memo = 5;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .pbci.FilePermission permission = 6;
  bool has_permission() const;
  private:
  bool _internal_has_permission() const;
  public:
  void clear_permission();
  const ::pbci::FilePermission& permission() const;
  PROTOBUF_NODISCARD ::pbci::FilePermission* release_permission();
  ::pbci::FilePermission* mutable_permission();
  void set_allocated_permission(::pbci::FilePermission* permission);
  private:
  const ::pbci::FilePermission& _internal_permission() const;
  ::pbci::FilePermission* _internal_mutable_permission();
  public:
  void unsafe_arena_set_allocated_permission(
      ::pbci::FilePermission* permission);
  ::pbci::FilePermission* unsafe_arena_release_permission();

  // @@protoc_insertion_point(class_scope:pbci.ConfigItemSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::pbci::FilePermission* permission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto;
};
// -------------------------------------------------------------------

class ConfigItemAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbci.ConfigItemAttachment) */ {
 public:
  inline ConfigItemAttachment() : ConfigItemAttachment(nullptr) {}
  ~ConfigItemAttachment() override;
  explicit constexpr ConfigItemAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigItemAttachment(const ConfigItemAttachment& from);
  ConfigItemAttachment(ConfigItemAttachment&& from) noexcept
    : ConfigItemAttachment() {
    *this = ::std::move(from);
  }

  inline ConfigItemAttachment& operator=(const ConfigItemAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigItemAttachment& operator=(ConfigItemAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigItemAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigItemAttachment* internal_default_instance() {
    return reinterpret_cast<const ConfigItemAttachment*>(
               &_ConfigItemAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigItemAttachment& a, ConfigItemAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigItemAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigItemAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigItemAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigItemAttachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigItemAttachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigItemAttachment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigItemAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbci.ConfigItemAttachment";
  }
  protected:
  explicit ConfigItemAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBizIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
  };
  // uint32 biz_id = 1;
  void clear_biz_id();
  uint32_t biz_id() const;
  void set_biz_id(uint32_t value);
  private:
  uint32_t _internal_biz_id() const;
  void _internal_set_biz_id(uint32_t value);
  public:

  // uint32 app_id = 2;
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbci.ConfigItemAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t biz_id_;
  uint32_t app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto;
};
// -------------------------------------------------------------------

class FilePermission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbci.FilePermission) */ {
 public:
  inline FilePermission() : FilePermission(nullptr) {}
  ~FilePermission() override;
  explicit constexpr FilePermission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilePermission(const FilePermission& from);
  FilePermission(FilePermission&& from) noexcept
    : FilePermission() {
    *this = ::std::move(from);
  }

  inline FilePermission& operator=(const FilePermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePermission& operator=(FilePermission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilePermission& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilePermission* internal_default_instance() {
    return reinterpret_cast<const FilePermission*>(
               &_FilePermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FilePermission& a, FilePermission& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePermission* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePermission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilePermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilePermission>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilePermission& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FilePermission& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePermission* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbci.FilePermission";
  }
  protected:
  explicit FilePermission(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kUserGroupFieldNumber = 2,
    kPrivilegeFieldNumber = 3,
  };
  // string user = 1;
  void clear_user();
  const std::string& user() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* user);
  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string user_group = 2;
  void clear_user_group();
  const std::string& user_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_group();
  PROTOBUF_NODISCARD std::string* release_user_group();
  void set_allocated_user_group(std::string* user_group);
  private:
  const std::string& _internal_user_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_group(const std::string& value);
  std::string* _internal_mutable_user_group();
  public:

  // string privilege = 3;
  void clear_privilege();
  const std::string& privilege() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_privilege(ArgT0&& arg0, ArgT... args);
  std::string* mutable_privilege();
  PROTOBUF_NODISCARD std::string* release_privilege();
  void set_allocated_privilege(std::string* privilege);
  private:
  const std::string& _internal_privilege() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_privilege(const std::string& value);
  std::string* _internal_mutable_privilege();
  public:

  // @@protoc_insertion_point(class_scope:pbci.FilePermission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privilege_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto;
};
// -------------------------------------------------------------------

class ListConfigItemCounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbci.ListConfigItemCounts) */ {
 public:
  inline ListConfigItemCounts() : ListConfigItemCounts(nullptr) {}
  ~ListConfigItemCounts() override;
  explicit constexpr ListConfigItemCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConfigItemCounts(const ListConfigItemCounts& from);
  ListConfigItemCounts(ListConfigItemCounts&& from) noexcept
    : ListConfigItemCounts() {
    *this = ::std::move(from);
  }

  inline ListConfigItemCounts& operator=(const ListConfigItemCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConfigItemCounts& operator=(ListConfigItemCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConfigItemCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConfigItemCounts* internal_default_instance() {
    return reinterpret_cast<const ListConfigItemCounts*>(
               &_ListConfigItemCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListConfigItemCounts& a, ListConfigItemCounts& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConfigItemCounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConfigItemCounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConfigItemCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConfigItemCounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConfigItemCounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConfigItemCounts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConfigItemCounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbci.ListConfigItemCounts";
  }
  protected:
  explicit ListConfigItemCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateAtFieldNumber = 3,
    kAppIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // string update_at = 3;
  void clear_update_at();
  const std::string& update_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_at();
  PROTOBUF_NODISCARD std::string* release_update_at();
  void set_allocated_update_at(std::string* update_at);
  private:
  const std::string& _internal_update_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_at(const std::string& value);
  std::string* _internal_mutable_update_at();
  public:

  // uint32 app_id = 1;
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // uint32 count = 2;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbci.ListConfigItemCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_at_;
  uint32_t app_id_;
  uint32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigItem

// uint32 id = 1;
inline void ConfigItem::clear_id() {
  id_ = 0u;
}
inline uint32_t ConfigItem::_internal_id() const {
  return id_;
}
inline uint32_t ConfigItem::id() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItem.id)
  return _internal_id();
}
inline void ConfigItem::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void ConfigItem::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pbci.ConfigItem.id)
}

// uint32 config_item_id = 2;
inline void ConfigItem::clear_config_item_id() {
  config_item_id_ = 0u;
}
inline uint32_t ConfigItem::_internal_config_item_id() const {
  return config_item_id_;
}
inline uint32_t ConfigItem::config_item_id() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItem.config_item_id)
  return _internal_config_item_id();
}
inline void ConfigItem::_internal_set_config_item_id(uint32_t value) {
  
  config_item_id_ = value;
}
inline void ConfigItem::set_config_item_id(uint32_t value) {
  _internal_set_config_item_id(value);
  // @@protoc_insertion_point(field_set:pbci.ConfigItem.config_item_id)
}

// string file_state = 3;
inline void ConfigItem::clear_file_state() {
  file_state_.ClearToEmpty();
}
inline const std::string& ConfigItem::file_state() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItem.file_state)
  return _internal_file_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigItem::set_file_state(ArgT0&& arg0, ArgT... args) {
 
 file_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.ConfigItem.file_state)
}
inline std::string* ConfigItem::mutable_file_state() {
  std::string* _s = _internal_mutable_file_state();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItem.file_state)
  return _s;
}
inline const std::string& ConfigItem::_internal_file_state() const {
  return file_state_.Get();
}
inline void ConfigItem::_internal_set_file_state(const std::string& value) {
  
  file_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigItem::_internal_mutable_file_state() {
  
  return file_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigItem::release_file_state() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItem.file_state)
  return file_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigItem::set_allocated_file_state(std::string* file_state) {
  if (file_state != nullptr) {
    
  } else {
    
  }
  file_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_state,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItem.file_state)
}

// .pbci.ConfigItemSpec spec = 4;
inline bool ConfigItem::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool ConfigItem::has_spec() const {
  return _internal_has_spec();
}
inline void ConfigItem::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::pbci::ConfigItemSpec& ConfigItem::_internal_spec() const {
  const ::pbci::ConfigItemSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbci::ConfigItemSpec&>(
      ::pbci::_ConfigItemSpec_default_instance_);
}
inline const ::pbci::ConfigItemSpec& ConfigItem::spec() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItem.spec)
  return _internal_spec();
}
inline void ConfigItem::unsafe_arena_set_allocated_spec(
    ::pbci::ConfigItemSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbci.ConfigItem.spec)
}
inline ::pbci::ConfigItemSpec* ConfigItem::release_spec() {
  
  ::pbci::ConfigItemSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbci::ConfigItemSpec* ConfigItem::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItem.spec)
  
  ::pbci::ConfigItemSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::pbci::ConfigItemSpec* ConfigItem::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbci::ConfigItemSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::pbci::ConfigItemSpec* ConfigItem::mutable_spec() {
  ::pbci::ConfigItemSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItem.spec)
  return _msg;
}
inline void ConfigItem::set_allocated_spec(::pbci::ConfigItemSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbci::ConfigItemSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItem.spec)
}

// .pbcommit.CommitSpec commit_spec = 5;
inline bool ConfigItem::_internal_has_commit_spec() const {
  return this != internal_default_instance() && commit_spec_ != nullptr;
}
inline bool ConfigItem::has_commit_spec() const {
  return _internal_has_commit_spec();
}
inline const ::pbcommit::CommitSpec& ConfigItem::_internal_commit_spec() const {
  const ::pbcommit::CommitSpec* p = commit_spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbcommit::CommitSpec&>(
      ::pbcommit::_CommitSpec_default_instance_);
}
inline const ::pbcommit::CommitSpec& ConfigItem::commit_spec() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItem.commit_spec)
  return _internal_commit_spec();
}
inline void ConfigItem::unsafe_arena_set_allocated_commit_spec(
    ::pbcommit::CommitSpec* commit_spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_spec_);
  }
  commit_spec_ = commit_spec;
  if (commit_spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbci.ConfigItem.commit_spec)
}
inline ::pbcommit::CommitSpec* ConfigItem::release_commit_spec() {
  
  ::pbcommit::CommitSpec* temp = commit_spec_;
  commit_spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbcommit::CommitSpec* ConfigItem::unsafe_arena_release_commit_spec() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItem.commit_spec)
  
  ::pbcommit::CommitSpec* temp = commit_spec_;
  commit_spec_ = nullptr;
  return temp;
}
inline ::pbcommit::CommitSpec* ConfigItem::_internal_mutable_commit_spec() {
  
  if (commit_spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbcommit::CommitSpec>(GetArenaForAllocation());
    commit_spec_ = p;
  }
  return commit_spec_;
}
inline ::pbcommit::CommitSpec* ConfigItem::mutable_commit_spec() {
  ::pbcommit::CommitSpec* _msg = _internal_mutable_commit_spec();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItem.commit_spec)
  return _msg;
}
inline void ConfigItem::set_allocated_commit_spec(::pbcommit::CommitSpec* commit_spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_spec_);
  }
  if (commit_spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_spec));
    if (message_arena != submessage_arena) {
      commit_spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit_spec, submessage_arena);
    }
    
  } else {
    
  }
  commit_spec_ = commit_spec;
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItem.commit_spec)
}

// .pbci.ConfigItemAttachment attachment = 6;
inline bool ConfigItem::_internal_has_attachment() const {
  return this != internal_default_instance() && attachment_ != nullptr;
}
inline bool ConfigItem::has_attachment() const {
  return _internal_has_attachment();
}
inline void ConfigItem::clear_attachment() {
  if (GetArenaForAllocation() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
}
inline const ::pbci::ConfigItemAttachment& ConfigItem::_internal_attachment() const {
  const ::pbci::ConfigItemAttachment* p = attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbci::ConfigItemAttachment&>(
      ::pbci::_ConfigItemAttachment_default_instance_);
}
inline const ::pbci::ConfigItemAttachment& ConfigItem::attachment() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItem.attachment)
  return _internal_attachment();
}
inline void ConfigItem::unsafe_arena_set_allocated_attachment(
    ::pbci::ConfigItemAttachment* attachment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbci.ConfigItem.attachment)
}
inline ::pbci::ConfigItemAttachment* ConfigItem::release_attachment() {
  
  ::pbci::ConfigItemAttachment* temp = attachment_;
  attachment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbci::ConfigItemAttachment* ConfigItem::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItem.attachment)
  
  ::pbci::ConfigItemAttachment* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::pbci::ConfigItemAttachment* ConfigItem::_internal_mutable_attachment() {
  
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbci::ConfigItemAttachment>(GetArenaForAllocation());
    attachment_ = p;
  }
  return attachment_;
}
inline ::pbci::ConfigItemAttachment* ConfigItem::mutable_attachment() {
  ::pbci::ConfigItemAttachment* _msg = _internal_mutable_attachment();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItem.attachment)
  return _msg;
}
inline void ConfigItem::set_allocated_attachment(::pbci::ConfigItemAttachment* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachment_;
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbci::ConfigItemAttachment>::GetOwningArena(attachment);
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    
  } else {
    
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItem.attachment)
}

// .pbbase.Revision revision = 7;
inline bool ConfigItem::_internal_has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline bool ConfigItem::has_revision() const {
  return _internal_has_revision();
}
inline const ::pbbase::Revision& ConfigItem::_internal_revision() const {
  const ::pbbase::Revision* p = revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbbase::Revision&>(
      ::pbbase::_Revision_default_instance_);
}
inline const ::pbbase::Revision& ConfigItem::revision() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItem.revision)
  return _internal_revision();
}
inline void ConfigItem::unsafe_arena_set_allocated_revision(
    ::pbbase::Revision* revision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  revision_ = revision;
  if (revision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbci.ConfigItem.revision)
}
inline ::pbbase::Revision* ConfigItem::release_revision() {
  
  ::pbbase::Revision* temp = revision_;
  revision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbbase::Revision* ConfigItem::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItem.revision)
  
  ::pbbase::Revision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::pbbase::Revision* ConfigItem::_internal_mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbbase::Revision>(GetArenaForAllocation());
    revision_ = p;
  }
  return revision_;
}
inline ::pbbase::Revision* ConfigItem::mutable_revision() {
  ::pbbase::Revision* _msg = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItem.revision)
  return _msg;
}
inline void ConfigItem::set_allocated_revision(::pbbase::Revision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision));
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItem.revision)
}

// -------------------------------------------------------------------

// ConfigItemSpec

// string name = 1;
inline void ConfigItemSpec::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ConfigItemSpec::name() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItemSpec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigItemSpec::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.ConfigItemSpec.name)
}
inline std::string* ConfigItemSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItemSpec.name)
  return _s;
}
inline const std::string& ConfigItemSpec::_internal_name() const {
  return name_.Get();
}
inline void ConfigItemSpec::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::release_name() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItemSpec.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigItemSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItemSpec.name)
}

// string path = 2;
inline void ConfigItemSpec::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& ConfigItemSpec::path() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItemSpec.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigItemSpec::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.ConfigItemSpec.path)
}
inline std::string* ConfigItemSpec::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItemSpec.path)
  return _s;
}
inline const std::string& ConfigItemSpec::_internal_path() const {
  return path_.Get();
}
inline void ConfigItemSpec::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::release_path() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItemSpec.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigItemSpec::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItemSpec.path)
}

// string file_type = 3;
inline void ConfigItemSpec::clear_file_type() {
  file_type_.ClearToEmpty();
}
inline const std::string& ConfigItemSpec::file_type() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItemSpec.file_type)
  return _internal_file_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigItemSpec::set_file_type(ArgT0&& arg0, ArgT... args) {
 
 file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.ConfigItemSpec.file_type)
}
inline std::string* ConfigItemSpec::mutable_file_type() {
  std::string* _s = _internal_mutable_file_type();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItemSpec.file_type)
  return _s;
}
inline const std::string& ConfigItemSpec::_internal_file_type() const {
  return file_type_.Get();
}
inline void ConfigItemSpec::_internal_set_file_type(const std::string& value) {
  
  file_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::_internal_mutable_file_type() {
  
  return file_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::release_file_type() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItemSpec.file_type)
  return file_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigItemSpec::set_allocated_file_type(std::string* file_type) {
  if (file_type != nullptr) {
    
  } else {
    
  }
  file_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItemSpec.file_type)
}

// string file_mode = 4;
inline void ConfigItemSpec::clear_file_mode() {
  file_mode_.ClearToEmpty();
}
inline const std::string& ConfigItemSpec::file_mode() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItemSpec.file_mode)
  return _internal_file_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigItemSpec::set_file_mode(ArgT0&& arg0, ArgT... args) {
 
 file_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.ConfigItemSpec.file_mode)
}
inline std::string* ConfigItemSpec::mutable_file_mode() {
  std::string* _s = _internal_mutable_file_mode();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItemSpec.file_mode)
  return _s;
}
inline const std::string& ConfigItemSpec::_internal_file_mode() const {
  return file_mode_.Get();
}
inline void ConfigItemSpec::_internal_set_file_mode(const std::string& value) {
  
  file_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::_internal_mutable_file_mode() {
  
  return file_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::release_file_mode() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItemSpec.file_mode)
  return file_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigItemSpec::set_allocated_file_mode(std::string* file_mode) {
  if (file_mode != nullptr) {
    
  } else {
    
  }
  file_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_mode,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_mode_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItemSpec.file_mode)
}

// string memo = 5;
inline void ConfigItemSpec::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& ConfigItemSpec::memo() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItemSpec.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigItemSpec::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.ConfigItemSpec.memo)
}
inline std::string* ConfigItemSpec::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItemSpec.memo)
  return _s;
}
inline const std::string& ConfigItemSpec::_internal_memo() const {
  return memo_.Get();
}
inline void ConfigItemSpec::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConfigItemSpec::release_memo() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItemSpec.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConfigItemSpec::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItemSpec.memo)
}

// .pbci.FilePermission permission = 6;
inline bool ConfigItemSpec::_internal_has_permission() const {
  return this != internal_default_instance() && permission_ != nullptr;
}
inline bool ConfigItemSpec::has_permission() const {
  return _internal_has_permission();
}
inline void ConfigItemSpec::clear_permission() {
  if (GetArenaForAllocation() == nullptr && permission_ != nullptr) {
    delete permission_;
  }
  permission_ = nullptr;
}
inline const ::pbci::FilePermission& ConfigItemSpec::_internal_permission() const {
  const ::pbci::FilePermission* p = permission_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbci::FilePermission&>(
      ::pbci::_FilePermission_default_instance_);
}
inline const ::pbci::FilePermission& ConfigItemSpec::permission() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItemSpec.permission)
  return _internal_permission();
}
inline void ConfigItemSpec::unsafe_arena_set_allocated_permission(
    ::pbci::FilePermission* permission) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permission_);
  }
  permission_ = permission;
  if (permission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbci.ConfigItemSpec.permission)
}
inline ::pbci::FilePermission* ConfigItemSpec::release_permission() {
  
  ::pbci::FilePermission* temp = permission_;
  permission_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbci::FilePermission* ConfigItemSpec::unsafe_arena_release_permission() {
  // @@protoc_insertion_point(field_release:pbci.ConfigItemSpec.permission)
  
  ::pbci::FilePermission* temp = permission_;
  permission_ = nullptr;
  return temp;
}
inline ::pbci::FilePermission* ConfigItemSpec::_internal_mutable_permission() {
  
  if (permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbci::FilePermission>(GetArenaForAllocation());
    permission_ = p;
  }
  return permission_;
}
inline ::pbci::FilePermission* ConfigItemSpec::mutable_permission() {
  ::pbci::FilePermission* _msg = _internal_mutable_permission();
  // @@protoc_insertion_point(field_mutable:pbci.ConfigItemSpec.permission)
  return _msg;
}
inline void ConfigItemSpec::set_allocated_permission(::pbci::FilePermission* permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete permission_;
  }
  if (permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbci::FilePermission>::GetOwningArena(permission);
    if (message_arena != submessage_arena) {
      permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permission, submessage_arena);
    }
    
  } else {
    
  }
  permission_ = permission;
  // @@protoc_insertion_point(field_set_allocated:pbci.ConfigItemSpec.permission)
}

// -------------------------------------------------------------------

// ConfigItemAttachment

// uint32 biz_id = 1;
inline void ConfigItemAttachment::clear_biz_id() {
  biz_id_ = 0u;
}
inline uint32_t ConfigItemAttachment::_internal_biz_id() const {
  return biz_id_;
}
inline uint32_t ConfigItemAttachment::biz_id() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItemAttachment.biz_id)
  return _internal_biz_id();
}
inline void ConfigItemAttachment::_internal_set_biz_id(uint32_t value) {
  
  biz_id_ = value;
}
inline void ConfigItemAttachment::set_biz_id(uint32_t value) {
  _internal_set_biz_id(value);
  // @@protoc_insertion_point(field_set:pbci.ConfigItemAttachment.biz_id)
}

// uint32 app_id = 2;
inline void ConfigItemAttachment::clear_app_id() {
  app_id_ = 0u;
}
inline uint32_t ConfigItemAttachment::_internal_app_id() const {
  return app_id_;
}
inline uint32_t ConfigItemAttachment::app_id() const {
  // @@protoc_insertion_point(field_get:pbci.ConfigItemAttachment.app_id)
  return _internal_app_id();
}
inline void ConfigItemAttachment::_internal_set_app_id(uint32_t value) {
  
  app_id_ = value;
}
inline void ConfigItemAttachment::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:pbci.ConfigItemAttachment.app_id)
}

// -------------------------------------------------------------------

// FilePermission

// string user = 1;
inline void FilePermission::clear_user() {
  user_.ClearToEmpty();
}
inline const std::string& FilePermission::user() const {
  // @@protoc_insertion_point(field_get:pbci.FilePermission.user)
  return _internal_user();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilePermission::set_user(ArgT0&& arg0, ArgT... args) {
 
 user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.FilePermission.user)
}
inline std::string* FilePermission::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:pbci.FilePermission.user)
  return _s;
}
inline const std::string& FilePermission::_internal_user() const {
  return user_.Get();
}
inline void FilePermission::_internal_set_user(const std::string& value) {
  
  user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FilePermission::_internal_mutable_user() {
  
  return user_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FilePermission::release_user() {
  // @@protoc_insertion_point(field_release:pbci.FilePermission.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FilePermission::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.FilePermission.user)
}

// string user_group = 2;
inline void FilePermission::clear_user_group() {
  user_group_.ClearToEmpty();
}
inline const std::string& FilePermission::user_group() const {
  // @@protoc_insertion_point(field_get:pbci.FilePermission.user_group)
  return _internal_user_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilePermission::set_user_group(ArgT0&& arg0, ArgT... args) {
 
 user_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.FilePermission.user_group)
}
inline std::string* FilePermission::mutable_user_group() {
  std::string* _s = _internal_mutable_user_group();
  // @@protoc_insertion_point(field_mutable:pbci.FilePermission.user_group)
  return _s;
}
inline const std::string& FilePermission::_internal_user_group() const {
  return user_group_.Get();
}
inline void FilePermission::_internal_set_user_group(const std::string& value) {
  
  user_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FilePermission::_internal_mutable_user_group() {
  
  return user_group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FilePermission::release_user_group() {
  // @@protoc_insertion_point(field_release:pbci.FilePermission.user_group)
  return user_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FilePermission::set_allocated_user_group(std::string* user_group) {
  if (user_group != nullptr) {
    
  } else {
    
  }
  user_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_group,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.FilePermission.user_group)
}

// string privilege = 3;
inline void FilePermission::clear_privilege() {
  privilege_.ClearToEmpty();
}
inline const std::string& FilePermission::privilege() const {
  // @@protoc_insertion_point(field_get:pbci.FilePermission.privilege)
  return _internal_privilege();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilePermission::set_privilege(ArgT0&& arg0, ArgT... args) {
 
 privilege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.FilePermission.privilege)
}
inline std::string* FilePermission::mutable_privilege() {
  std::string* _s = _internal_mutable_privilege();
  // @@protoc_insertion_point(field_mutable:pbci.FilePermission.privilege)
  return _s;
}
inline const std::string& FilePermission::_internal_privilege() const {
  return privilege_.Get();
}
inline void FilePermission::_internal_set_privilege(const std::string& value) {
  
  privilege_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FilePermission::_internal_mutable_privilege() {
  
  return privilege_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FilePermission::release_privilege() {
  // @@protoc_insertion_point(field_release:pbci.FilePermission.privilege)
  return privilege_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FilePermission::set_allocated_privilege(std::string* privilege) {
  if (privilege != nullptr) {
    
  } else {
    
  }
  privilege_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privilege,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (privilege_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    privilege_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.FilePermission.privilege)
}

// -------------------------------------------------------------------

// ListConfigItemCounts

// uint32 app_id = 1;
inline void ListConfigItemCounts::clear_app_id() {
  app_id_ = 0u;
}
inline uint32_t ListConfigItemCounts::_internal_app_id() const {
  return app_id_;
}
inline uint32_t ListConfigItemCounts::app_id() const {
  // @@protoc_insertion_point(field_get:pbci.ListConfigItemCounts.app_id)
  return _internal_app_id();
}
inline void ListConfigItemCounts::_internal_set_app_id(uint32_t value) {
  
  app_id_ = value;
}
inline void ListConfigItemCounts::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:pbci.ListConfigItemCounts.app_id)
}

// uint32 count = 2;
inline void ListConfigItemCounts::clear_count() {
  count_ = 0u;
}
inline uint32_t ListConfigItemCounts::_internal_count() const {
  return count_;
}
inline uint32_t ListConfigItemCounts::count() const {
  // @@protoc_insertion_point(field_get:pbci.ListConfigItemCounts.count)
  return _internal_count();
}
inline void ListConfigItemCounts::_internal_set_count(uint32_t value) {
  
  count_ = value;
}
inline void ListConfigItemCounts::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:pbci.ListConfigItemCounts.count)
}

// string update_at = 3;
inline void ListConfigItemCounts::clear_update_at() {
  update_at_.ClearToEmpty();
}
inline const std::string& ListConfigItemCounts::update_at() const {
  // @@protoc_insertion_point(field_get:pbci.ListConfigItemCounts.update_at)
  return _internal_update_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListConfigItemCounts::set_update_at(ArgT0&& arg0, ArgT... args) {
 
 update_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbci.ListConfigItemCounts.update_at)
}
inline std::string* ListConfigItemCounts::mutable_update_at() {
  std::string* _s = _internal_mutable_update_at();
  // @@protoc_insertion_point(field_mutable:pbci.ListConfigItemCounts.update_at)
  return _s;
}
inline const std::string& ListConfigItemCounts::_internal_update_at() const {
  return update_at_.Get();
}
inline void ListConfigItemCounts::_internal_set_update_at(const std::string& value) {
  
  update_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListConfigItemCounts::_internal_mutable_update_at() {
  
  return update_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListConfigItemCounts::release_update_at() {
  // @@protoc_insertion_point(field_release:pbci.ListConfigItemCounts.update_at)
  return update_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListConfigItemCounts::set_allocated_update_at(std::string* update_at) {
  if (update_at != nullptr) {
    
  } else {
    
  }
  update_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_at,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_at_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbci.ListConfigItemCounts.update_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbci

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fconfig_2ditem_2fconfig_5fitem_2eproto
