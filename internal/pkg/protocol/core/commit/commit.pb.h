// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/protocol/core/commit/commit.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pkg/protocol/core/base/base.pb.h"
#include "pkg/protocol/core/content/content.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto;
namespace pbcommit {
class Commit;
struct CommitDefaultTypeInternal;
extern CommitDefaultTypeInternal _Commit_default_instance_;
class CommitAttachment;
struct CommitAttachmentDefaultTypeInternal;
extern CommitAttachmentDefaultTypeInternal _CommitAttachment_default_instance_;
class CommitSpec;
struct CommitSpecDefaultTypeInternal;
extern CommitSpecDefaultTypeInternal _CommitSpec_default_instance_;
class ReleasedCommitSpec;
struct ReleasedCommitSpecDefaultTypeInternal;
extern ReleasedCommitSpecDefaultTypeInternal _ReleasedCommitSpec_default_instance_;
}  // namespace pbcommit
PROTOBUF_NAMESPACE_OPEN
template<> ::pbcommit::Commit* Arena::CreateMaybeMessage<::pbcommit::Commit>(Arena*);
template<> ::pbcommit::CommitAttachment* Arena::CreateMaybeMessage<::pbcommit::CommitAttachment>(Arena*);
template<> ::pbcommit::CommitSpec* Arena::CreateMaybeMessage<::pbcommit::CommitSpec>(Arena*);
template<> ::pbcommit::ReleasedCommitSpec* Arena::CreateMaybeMessage<::pbcommit::ReleasedCommitSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbcommit {

// ===================================================================

class Commit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbcommit.Commit) */ {
 public:
  inline Commit() : Commit(nullptr) {}
  ~Commit() override;
  explicit constexpr Commit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Commit(const Commit& from);
  Commit(Commit&& from) noexcept
    : Commit() {
    *this = ::std::move(from);
  }

  inline Commit& operator=(const Commit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commit& operator=(Commit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Commit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Commit* internal_default_instance() {
    return reinterpret_cast<const Commit*>(
               &_Commit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Commit& a, Commit& b) {
    a.Swap(&b);
  }
  inline void Swap(Commit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Commit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Commit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Commit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Commit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbcommit.Commit";
  }
  protected:
  explicit Commit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 2,
    kAttachmentFieldNumber = 3,
    kRevisionFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // .pbcommit.CommitSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::pbcommit::CommitSpec& spec() const;
  PROTOBUF_NODISCARD ::pbcommit::CommitSpec* release_spec();
  ::pbcommit::CommitSpec* mutable_spec();
  void set_allocated_spec(::pbcommit::CommitSpec* spec);
  private:
  const ::pbcommit::CommitSpec& _internal_spec() const;
  ::pbcommit::CommitSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::pbcommit::CommitSpec* spec);
  ::pbcommit::CommitSpec* unsafe_arena_release_spec();

  // .pbcommit.CommitAttachment attachment = 3;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::pbcommit::CommitAttachment& attachment() const;
  PROTOBUF_NODISCARD ::pbcommit::CommitAttachment* release_attachment();
  ::pbcommit::CommitAttachment* mutable_attachment();
  void set_allocated_attachment(::pbcommit::CommitAttachment* attachment);
  private:
  const ::pbcommit::CommitAttachment& _internal_attachment() const;
  ::pbcommit::CommitAttachment* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::pbcommit::CommitAttachment* attachment);
  ::pbcommit::CommitAttachment* unsafe_arena_release_attachment();

  // .pbbase.CreatedRevision revision = 4;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const ::pbbase::CreatedRevision& revision() const;
  PROTOBUF_NODISCARD ::pbbase::CreatedRevision* release_revision();
  ::pbbase::CreatedRevision* mutable_revision();
  void set_allocated_revision(::pbbase::CreatedRevision* revision);
  private:
  const ::pbbase::CreatedRevision& _internal_revision() const;
  ::pbbase::CreatedRevision* _internal_mutable_revision();
  public:
  void unsafe_arena_set_allocated_revision(
      ::pbbase::CreatedRevision* revision);
  ::pbbase::CreatedRevision* unsafe_arena_release_revision();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbcommit.Commit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pbcommit::CommitSpec* spec_;
  ::pbcommit::CommitAttachment* attachment_;
  ::pbbase::CreatedRevision* revision_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto;
};
// -------------------------------------------------------------------

class CommitSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbcommit.CommitSpec) */ {
 public:
  inline CommitSpec() : CommitSpec(nullptr) {}
  ~CommitSpec() override;
  explicit constexpr CommitSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitSpec(const CommitSpec& from);
  CommitSpec(CommitSpec&& from) noexcept
    : CommitSpec() {
    *this = ::std::move(from);
  }

  inline CommitSpec& operator=(const CommitSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitSpec& operator=(CommitSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitSpec* internal_default_instance() {
    return reinterpret_cast<const CommitSpec*>(
               &_CommitSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommitSpec& a, CommitSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommitSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbcommit.CommitSpec";
  }
  protected:
  explicit CommitSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 3,
    kContentFieldNumber = 2,
    kContentIdFieldNumber = 1,
  };
  // string memo = 3;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .pbcontent.ContentSpec content = 2;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const ::pbcontent::ContentSpec& content() const;
  PROTOBUF_NODISCARD ::pbcontent::ContentSpec* release_content();
  ::pbcontent::ContentSpec* mutable_content();
  void set_allocated_content(::pbcontent::ContentSpec* content);
  private:
  const ::pbcontent::ContentSpec& _internal_content() const;
  ::pbcontent::ContentSpec* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      ::pbcontent::ContentSpec* content);
  ::pbcontent::ContentSpec* unsafe_arena_release_content();

  // uint32 content_id = 1;
  void clear_content_id();
  uint32_t content_id() const;
  void set_content_id(uint32_t value);
  private:
  uint32_t _internal_content_id() const;
  void _internal_set_content_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbcommit.CommitSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::pbcontent::ContentSpec* content_;
  uint32_t content_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto;
};
// -------------------------------------------------------------------

class ReleasedCommitSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbcommit.ReleasedCommitSpec) */ {
 public:
  inline ReleasedCommitSpec() : ReleasedCommitSpec(nullptr) {}
  ~ReleasedCommitSpec() override;
  explicit constexpr ReleasedCommitSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleasedCommitSpec(const ReleasedCommitSpec& from);
  ReleasedCommitSpec(ReleasedCommitSpec&& from) noexcept
    : ReleasedCommitSpec() {
    *this = ::std::move(from);
  }

  inline ReleasedCommitSpec& operator=(const ReleasedCommitSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleasedCommitSpec& operator=(ReleasedCommitSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleasedCommitSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleasedCommitSpec* internal_default_instance() {
    return reinterpret_cast<const ReleasedCommitSpec*>(
               &_ReleasedCommitSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReleasedCommitSpec& a, ReleasedCommitSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleasedCommitSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleasedCommitSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleasedCommitSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleasedCommitSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleasedCommitSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReleasedCommitSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleasedCommitSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbcommit.ReleasedCommitSpec";
  }
  protected:
  explicit ReleasedCommitSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoFieldNumber = 3,
    kContentFieldNumber = 2,
    kContentIdFieldNumber = 1,
  };
  // string memo = 3;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // .pbcontent.ReleasedContentSpec content = 2;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const ::pbcontent::ReleasedContentSpec& content() const;
  PROTOBUF_NODISCARD ::pbcontent::ReleasedContentSpec* release_content();
  ::pbcontent::ReleasedContentSpec* mutable_content();
  void set_allocated_content(::pbcontent::ReleasedContentSpec* content);
  private:
  const ::pbcontent::ReleasedContentSpec& _internal_content() const;
  ::pbcontent::ReleasedContentSpec* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      ::pbcontent::ReleasedContentSpec* content);
  ::pbcontent::ReleasedContentSpec* unsafe_arena_release_content();

  // uint32 content_id = 1;
  void clear_content_id();
  uint32_t content_id() const;
  void set_content_id(uint32_t value);
  private:
  uint32_t _internal_content_id() const;
  void _internal_set_content_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbcommit.ReleasedCommitSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::pbcontent::ReleasedContentSpec* content_;
  uint32_t content_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto;
};
// -------------------------------------------------------------------

class CommitAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbcommit.CommitAttachment) */ {
 public:
  inline CommitAttachment() : CommitAttachment(nullptr) {}
  ~CommitAttachment() override;
  explicit constexpr CommitAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitAttachment(const CommitAttachment& from);
  CommitAttachment(CommitAttachment&& from) noexcept
    : CommitAttachment() {
    *this = ::std::move(from);
  }

  inline CommitAttachment& operator=(const CommitAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitAttachment& operator=(CommitAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitAttachment* internal_default_instance() {
    return reinterpret_cast<const CommitAttachment*>(
               &_CommitAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommitAttachment& a, CommitAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitAttachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitAttachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommitAttachment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbcommit.CommitAttachment";
  }
  protected:
  explicit CommitAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBizIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kConfigItemIdFieldNumber = 3,
  };
  // uint32 biz_id = 1;
  void clear_biz_id();
  uint32_t biz_id() const;
  void set_biz_id(uint32_t value);
  private:
  uint32_t _internal_biz_id() const;
  void _internal_set_biz_id(uint32_t value);
  public:

  // uint32 app_id = 2;
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // uint32 config_item_id = 3;
  void clear_config_item_id();
  uint32_t config_item_id() const;
  void set_config_item_id(uint32_t value);
  private:
  uint32_t _internal_config_item_id() const;
  void _internal_set_config_item_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbcommit.CommitAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t biz_id_;
  uint32_t app_id_;
  uint32_t config_item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Commit

// uint32 id = 1;
inline void Commit::clear_id() {
  id_ = 0u;
}
inline uint32_t Commit::_internal_id() const {
  return id_;
}
inline uint32_t Commit::id() const {
  // @@protoc_insertion_point(field_get:pbcommit.Commit.id)
  return _internal_id();
}
inline void Commit::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Commit::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pbcommit.Commit.id)
}

// .pbcommit.CommitSpec spec = 2;
inline bool Commit::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Commit::has_spec() const {
  return _internal_has_spec();
}
inline void Commit::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::pbcommit::CommitSpec& Commit::_internal_spec() const {
  const ::pbcommit::CommitSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbcommit::CommitSpec&>(
      ::pbcommit::_CommitSpec_default_instance_);
}
inline const ::pbcommit::CommitSpec& Commit::spec() const {
  // @@protoc_insertion_point(field_get:pbcommit.Commit.spec)
  return _internal_spec();
}
inline void Commit::unsafe_arena_set_allocated_spec(
    ::pbcommit::CommitSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbcommit.Commit.spec)
}
inline ::pbcommit::CommitSpec* Commit::release_spec() {
  
  ::pbcommit::CommitSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbcommit::CommitSpec* Commit::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:pbcommit.Commit.spec)
  
  ::pbcommit::CommitSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::pbcommit::CommitSpec* Commit::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbcommit::CommitSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::pbcommit::CommitSpec* Commit::mutable_spec() {
  ::pbcommit::CommitSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:pbcommit.Commit.spec)
  return _msg;
}
inline void Commit::set_allocated_spec(::pbcommit::CommitSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbcommit::CommitSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:pbcommit.Commit.spec)
}

// .pbcommit.CommitAttachment attachment = 3;
inline bool Commit::_internal_has_attachment() const {
  return this != internal_default_instance() && attachment_ != nullptr;
}
inline bool Commit::has_attachment() const {
  return _internal_has_attachment();
}
inline void Commit::clear_attachment() {
  if (GetArenaForAllocation() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
}
inline const ::pbcommit::CommitAttachment& Commit::_internal_attachment() const {
  const ::pbcommit::CommitAttachment* p = attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbcommit::CommitAttachment&>(
      ::pbcommit::_CommitAttachment_default_instance_);
}
inline const ::pbcommit::CommitAttachment& Commit::attachment() const {
  // @@protoc_insertion_point(field_get:pbcommit.Commit.attachment)
  return _internal_attachment();
}
inline void Commit::unsafe_arena_set_allocated_attachment(
    ::pbcommit::CommitAttachment* attachment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbcommit.Commit.attachment)
}
inline ::pbcommit::CommitAttachment* Commit::release_attachment() {
  
  ::pbcommit::CommitAttachment* temp = attachment_;
  attachment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbcommit::CommitAttachment* Commit::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:pbcommit.Commit.attachment)
  
  ::pbcommit::CommitAttachment* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::pbcommit::CommitAttachment* Commit::_internal_mutable_attachment() {
  
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbcommit::CommitAttachment>(GetArenaForAllocation());
    attachment_ = p;
  }
  return attachment_;
}
inline ::pbcommit::CommitAttachment* Commit::mutable_attachment() {
  ::pbcommit::CommitAttachment* _msg = _internal_mutable_attachment();
  // @@protoc_insertion_point(field_mutable:pbcommit.Commit.attachment)
  return _msg;
}
inline void Commit::set_allocated_attachment(::pbcommit::CommitAttachment* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachment_;
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbcommit::CommitAttachment>::GetOwningArena(attachment);
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    
  } else {
    
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:pbcommit.Commit.attachment)
}

// .pbbase.CreatedRevision revision = 4;
inline bool Commit::_internal_has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline bool Commit::has_revision() const {
  return _internal_has_revision();
}
inline const ::pbbase::CreatedRevision& Commit::_internal_revision() const {
  const ::pbbase::CreatedRevision* p = revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbbase::CreatedRevision&>(
      ::pbbase::_CreatedRevision_default_instance_);
}
inline const ::pbbase::CreatedRevision& Commit::revision() const {
  // @@protoc_insertion_point(field_get:pbcommit.Commit.revision)
  return _internal_revision();
}
inline void Commit::unsafe_arena_set_allocated_revision(
    ::pbbase::CreatedRevision* revision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  revision_ = revision;
  if (revision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbcommit.Commit.revision)
}
inline ::pbbase::CreatedRevision* Commit::release_revision() {
  
  ::pbbase::CreatedRevision* temp = revision_;
  revision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbbase::CreatedRevision* Commit::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_release:pbcommit.Commit.revision)
  
  ::pbbase::CreatedRevision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::pbbase::CreatedRevision* Commit::_internal_mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbbase::CreatedRevision>(GetArenaForAllocation());
    revision_ = p;
  }
  return revision_;
}
inline ::pbbase::CreatedRevision* Commit::mutable_revision() {
  ::pbbase::CreatedRevision* _msg = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:pbcommit.Commit.revision)
  return _msg;
}
inline void Commit::set_allocated_revision(::pbbase::CreatedRevision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision));
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:pbcommit.Commit.revision)
}

// -------------------------------------------------------------------

// CommitSpec

// uint32 content_id = 1;
inline void CommitSpec::clear_content_id() {
  content_id_ = 0u;
}
inline uint32_t CommitSpec::_internal_content_id() const {
  return content_id_;
}
inline uint32_t CommitSpec::content_id() const {
  // @@protoc_insertion_point(field_get:pbcommit.CommitSpec.content_id)
  return _internal_content_id();
}
inline void CommitSpec::_internal_set_content_id(uint32_t value) {
  
  content_id_ = value;
}
inline void CommitSpec::set_content_id(uint32_t value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:pbcommit.CommitSpec.content_id)
}

// .pbcontent.ContentSpec content = 2;
inline bool CommitSpec::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool CommitSpec::has_content() const {
  return _internal_has_content();
}
inline const ::pbcontent::ContentSpec& CommitSpec::_internal_content() const {
  const ::pbcontent::ContentSpec* p = content_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbcontent::ContentSpec&>(
      ::pbcontent::_ContentSpec_default_instance_);
}
inline const ::pbcontent::ContentSpec& CommitSpec::content() const {
  // @@protoc_insertion_point(field_get:pbcommit.CommitSpec.content)
  return _internal_content();
}
inline void CommitSpec::unsafe_arena_set_allocated_content(
    ::pbcontent::ContentSpec* content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbcommit.CommitSpec.content)
}
inline ::pbcontent::ContentSpec* CommitSpec::release_content() {
  
  ::pbcontent::ContentSpec* temp = content_;
  content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbcontent::ContentSpec* CommitSpec::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:pbcommit.CommitSpec.content)
  
  ::pbcontent::ContentSpec* temp = content_;
  content_ = nullptr;
  return temp;
}
inline ::pbcontent::ContentSpec* CommitSpec::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbcontent::ContentSpec>(GetArenaForAllocation());
    content_ = p;
  }
  return content_;
}
inline ::pbcontent::ContentSpec* CommitSpec::mutable_content() {
  ::pbcontent::ContentSpec* _msg = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:pbcommit.CommitSpec.content)
  return _msg;
}
inline void CommitSpec::set_allocated_content(::pbcontent::ContentSpec* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content));
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:pbcommit.CommitSpec.content)
}

// string memo = 3;
inline void CommitSpec::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& CommitSpec::memo() const {
  // @@protoc_insertion_point(field_get:pbcommit.CommitSpec.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommitSpec::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbcommit.CommitSpec.memo)
}
inline std::string* CommitSpec::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:pbcommit.CommitSpec.memo)
  return _s;
}
inline const std::string& CommitSpec::_internal_memo() const {
  return memo_.Get();
}
inline void CommitSpec::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommitSpec::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommitSpec::release_memo() {
  // @@protoc_insertion_point(field_release:pbcommit.CommitSpec.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommitSpec::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbcommit.CommitSpec.memo)
}

// -------------------------------------------------------------------

// ReleasedCommitSpec

// uint32 content_id = 1;
inline void ReleasedCommitSpec::clear_content_id() {
  content_id_ = 0u;
}
inline uint32_t ReleasedCommitSpec::_internal_content_id() const {
  return content_id_;
}
inline uint32_t ReleasedCommitSpec::content_id() const {
  // @@protoc_insertion_point(field_get:pbcommit.ReleasedCommitSpec.content_id)
  return _internal_content_id();
}
inline void ReleasedCommitSpec::_internal_set_content_id(uint32_t value) {
  
  content_id_ = value;
}
inline void ReleasedCommitSpec::set_content_id(uint32_t value) {
  _internal_set_content_id(value);
  // @@protoc_insertion_point(field_set:pbcommit.ReleasedCommitSpec.content_id)
}

// .pbcontent.ReleasedContentSpec content = 2;
inline bool ReleasedCommitSpec::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool ReleasedCommitSpec::has_content() const {
  return _internal_has_content();
}
inline const ::pbcontent::ReleasedContentSpec& ReleasedCommitSpec::_internal_content() const {
  const ::pbcontent::ReleasedContentSpec* p = content_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbcontent::ReleasedContentSpec&>(
      ::pbcontent::_ReleasedContentSpec_default_instance_);
}
inline const ::pbcontent::ReleasedContentSpec& ReleasedCommitSpec::content() const {
  // @@protoc_insertion_point(field_get:pbcommit.ReleasedCommitSpec.content)
  return _internal_content();
}
inline void ReleasedCommitSpec::unsafe_arena_set_allocated_content(
    ::pbcontent::ReleasedContentSpec* content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbcommit.ReleasedCommitSpec.content)
}
inline ::pbcontent::ReleasedContentSpec* ReleasedCommitSpec::release_content() {
  
  ::pbcontent::ReleasedContentSpec* temp = content_;
  content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbcontent::ReleasedContentSpec* ReleasedCommitSpec::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:pbcommit.ReleasedCommitSpec.content)
  
  ::pbcontent::ReleasedContentSpec* temp = content_;
  content_ = nullptr;
  return temp;
}
inline ::pbcontent::ReleasedContentSpec* ReleasedCommitSpec::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbcontent::ReleasedContentSpec>(GetArenaForAllocation());
    content_ = p;
  }
  return content_;
}
inline ::pbcontent::ReleasedContentSpec* ReleasedCommitSpec::mutable_content() {
  ::pbcontent::ReleasedContentSpec* _msg = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:pbcommit.ReleasedCommitSpec.content)
  return _msg;
}
inline void ReleasedCommitSpec::set_allocated_content(::pbcontent::ReleasedContentSpec* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content));
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:pbcommit.ReleasedCommitSpec.content)
}

// string memo = 3;
inline void ReleasedCommitSpec::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& ReleasedCommitSpec::memo() const {
  // @@protoc_insertion_point(field_get:pbcommit.ReleasedCommitSpec.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleasedCommitSpec::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbcommit.ReleasedCommitSpec.memo)
}
inline std::string* ReleasedCommitSpec::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:pbcommit.ReleasedCommitSpec.memo)
  return _s;
}
inline const std::string& ReleasedCommitSpec::_internal_memo() const {
  return memo_.Get();
}
inline void ReleasedCommitSpec::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReleasedCommitSpec::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReleasedCommitSpec::release_memo() {
  // @@protoc_insertion_point(field_release:pbcommit.ReleasedCommitSpec.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReleasedCommitSpec::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbcommit.ReleasedCommitSpec.memo)
}

// -------------------------------------------------------------------

// CommitAttachment

// uint32 biz_id = 1;
inline void CommitAttachment::clear_biz_id() {
  biz_id_ = 0u;
}
inline uint32_t CommitAttachment::_internal_biz_id() const {
  return biz_id_;
}
inline uint32_t CommitAttachment::biz_id() const {
  // @@protoc_insertion_point(field_get:pbcommit.CommitAttachment.biz_id)
  return _internal_biz_id();
}
inline void CommitAttachment::_internal_set_biz_id(uint32_t value) {
  
  biz_id_ = value;
}
inline void CommitAttachment::set_biz_id(uint32_t value) {
  _internal_set_biz_id(value);
  // @@protoc_insertion_point(field_set:pbcommit.CommitAttachment.biz_id)
}

// uint32 app_id = 2;
inline void CommitAttachment::clear_app_id() {
  app_id_ = 0u;
}
inline uint32_t CommitAttachment::_internal_app_id() const {
  return app_id_;
}
inline uint32_t CommitAttachment::app_id() const {
  // @@protoc_insertion_point(field_get:pbcommit.CommitAttachment.app_id)
  return _internal_app_id();
}
inline void CommitAttachment::_internal_set_app_id(uint32_t value) {
  
  app_id_ = value;
}
inline void CommitAttachment::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:pbcommit.CommitAttachment.app_id)
}

// uint32 config_item_id = 3;
inline void CommitAttachment::clear_config_item_id() {
  config_item_id_ = 0u;
}
inline uint32_t CommitAttachment::_internal_config_item_id() const {
  return config_item_id_;
}
inline uint32_t CommitAttachment::config_item_id() const {
  // @@protoc_insertion_point(field_get:pbcommit.CommitAttachment.config_item_id)
  return _internal_config_item_id();
}
inline void CommitAttachment::_internal_set_config_item_id(uint32_t value) {
  
  config_item_id_ = value;
}
inline void CommitAttachment::set_config_item_id(uint32_t value) {
  _internal_set_config_item_id(value);
  // @@protoc_insertion_point(field_set:pbcommit.CommitAttachment.config_item_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbcommit

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto
