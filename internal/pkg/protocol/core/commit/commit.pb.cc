// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/protocol/core/commit/commit.proto

#include "pkg/protocol/core/commit/commit.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pbcommit {
constexpr Commit::Commit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , attachment_(nullptr)
  , revision_(nullptr)
  , id_(0u){}
struct CommitDefaultTypeInternal {
  constexpr CommitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitDefaultTypeInternal() {}
  union {
    Commit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitDefaultTypeInternal _Commit_default_instance_;
constexpr CommitSpec::CommitSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(nullptr)
  , content_id_(0u){}
struct CommitSpecDefaultTypeInternal {
  constexpr CommitSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitSpecDefaultTypeInternal() {}
  union {
    CommitSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitSpecDefaultTypeInternal _CommitSpec_default_instance_;
constexpr ReleasedCommitSpec::ReleasedCommitSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : memo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(nullptr)
  , content_id_(0u){}
struct ReleasedCommitSpecDefaultTypeInternal {
  constexpr ReleasedCommitSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReleasedCommitSpecDefaultTypeInternal() {}
  union {
    ReleasedCommitSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReleasedCommitSpecDefaultTypeInternal _ReleasedCommitSpec_default_instance_;
constexpr CommitAttachment::CommitAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : biz_id_(0u)
  , app_id_(0u)
  , config_item_id_(0u){}
struct CommitAttachmentDefaultTypeInternal {
  constexpr CommitAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitAttachmentDefaultTypeInternal() {}
  union {
    CommitAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitAttachmentDefaultTypeInternal _CommitAttachment_default_instance_;
}  // namespace pbcommit
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto = nullptr;

const uint32_t TableStruct_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbcommit::Commit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbcommit::Commit, id_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::Commit, spec_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::Commit, attachment_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::Commit, revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbcommit::CommitSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbcommit::CommitSpec, content_id_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::CommitSpec, content_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::CommitSpec, memo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbcommit::ReleasedCommitSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbcommit::ReleasedCommitSpec, content_id_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::ReleasedCommitSpec, content_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::ReleasedCommitSpec, memo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbcommit::CommitAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbcommit::CommitAttachment, biz_id_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::CommitAttachment, app_id_),
  PROTOBUF_FIELD_OFFSET(::pbcommit::CommitAttachment, config_item_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pbcommit::Commit)},
  { 10, -1, -1, sizeof(::pbcommit::CommitSpec)},
  { 19, -1, -1, sizeof(::pbcommit::ReleasedCommitSpec)},
  { 28, -1, -1, sizeof(::pbcommit::CommitAttachment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbcommit::_Commit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbcommit::_CommitSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbcommit::_ReleasedCommitSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbcommit::_CommitAttachment_default_instance_),
};

const char descriptor_table_protodef_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%pkg/protocol/core/commit/commit.proto\022"
  "\010pbcommit\032!pkg/protocol/core/base/base.p"
  "roto\032\'pkg/protocol/core/content/content."
  "proto\"\223\001\n\006Commit\022\n\n\002id\030\001 \001(\r\022\"\n\004spec\030\002 \001"
  "(\0132\024.pbcommit.CommitSpec\022.\n\nattachment\030\003"
  " \001(\0132\032.pbcommit.CommitAttachment\022)\n\010revi"
  "sion\030\004 \001(\0132\027.pbbase.CreatedRevision\"W\n\nC"
  "ommitSpec\022\022\n\ncontent_id\030\001 \001(\r\022\'\n\007content"
  "\030\002 \001(\0132\026.pbcontent.ContentSpec\022\014\n\004memo\030\003"
  " \001(\t\"g\n\022ReleasedCommitSpec\022\022\n\ncontent_id"
  "\030\001 \001(\r\022/\n\007content\030\002 \001(\0132\036.pbcontent.Rele"
  "asedContentSpec\022\014\n\004memo\030\003 \001(\t\"J\n\020CommitA"
  "ttachment\022\016\n\006biz_id\030\001 \001(\r\022\016\n\006app_id\030\002 \001("
  "\r\022\026\n\016config_item_id\030\003 \001(\rB[ZYgithub.com/"
  "TencentBlueKing/bk-bcs/bcs-services/bcs-"
  "bscp/pkg/protocol/core/commit;pbcommitb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_deps[2] = {
  &::descriptor_table_pkg_2fprotocol_2fcore_2fbase_2fbase_2eproto,
  &::descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto = {
  false, false, 646, descriptor_table_protodef_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto, "pkg/protocol/core/commit/commit.proto", 
  &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_once, descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto::offsets,
  file_level_metadata_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto, file_level_enum_descriptors_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto, file_level_service_descriptors_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_getter() {
  return &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto(&descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto);
namespace pbcommit {

// ===================================================================

class Commit::_Internal {
 public:
  static const ::pbcommit::CommitSpec& spec(const Commit* msg);
  static const ::pbcommit::CommitAttachment& attachment(const Commit* msg);
  static const ::pbbase::CreatedRevision& revision(const Commit* msg);
};

const ::pbcommit::CommitSpec&
Commit::_Internal::spec(const Commit* msg) {
  return *msg->spec_;
}
const ::pbcommit::CommitAttachment&
Commit::_Internal::attachment(const Commit* msg) {
  return *msg->attachment_;
}
const ::pbbase::CreatedRevision&
Commit::_Internal::revision(const Commit* msg) {
  return *msg->revision_;
}
void Commit::clear_revision() {
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
Commit::Commit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbcommit.Commit)
}
Commit::Commit(const Commit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::pbcommit::CommitSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_attachment()) {
    attachment_ = new ::pbcommit::CommitAttachment(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  if (from._internal_has_revision()) {
    revision_ = new ::pbbase::CreatedRevision(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pbcommit.Commit)
}

inline void Commit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(id_));
}

Commit::~Commit() {
  // @@protoc_insertion_point(destructor:pbcommit.Commit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Commit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete attachment_;
  if (this != internal_default_instance()) delete revision_;
}

void Commit::ArenaDtor(void* object) {
  Commit* _this = reinterpret_cast< Commit* >(object);
  (void)_this;
}
void Commit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Commit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Commit::Clear() {
// @@protoc_insertion_point(message_clear_start:pbcommit.Commit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Commit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbcommit.CommitSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbcommit.CommitAttachment attachment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbbase.CreatedRevision revision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Commit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcommit.Commit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .pbcommit.CommitSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // .pbcommit.CommitAttachment attachment = 3;
  if (this->_internal_has_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attachment(this), target, stream);
  }

  // .pbbase.CreatedRevision revision = 4;
  if (this->_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::revision(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcommit.Commit)
  return target;
}

size_t Commit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbcommit.Commit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pbcommit.CommitSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .pbcommit.CommitAttachment attachment = 3;
  if (this->_internal_has_attachment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attachment_);
  }

  // .pbbase.CreatedRevision revision = 4;
  if (this->_internal_has_revision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Commit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Commit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Commit::GetClassData() const { return &_class_data_; }

void Commit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Commit *>(to)->MergeFrom(
      static_cast<const Commit &>(from));
}


void Commit::MergeFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbcommit.Commit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::pbcommit::CommitSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_attachment()) {
    _internal_mutable_attachment()->::pbcommit::CommitAttachment::MergeFrom(from._internal_attachment());
  }
  if (from._internal_has_revision()) {
    _internal_mutable_revision()->::pbbase::CreatedRevision::MergeFrom(from._internal_revision());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Commit::CopyFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbcommit.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commit::IsInitialized() const {
  return true;
}

void Commit::InternalSwap(Commit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Commit, id_)
      + sizeof(Commit::id_)
      - PROTOBUF_FIELD_OFFSET(Commit, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Commit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto[0]);
}

// ===================================================================

class CommitSpec::_Internal {
 public:
  static const ::pbcontent::ContentSpec& content(const CommitSpec* msg);
};

const ::pbcontent::ContentSpec&
CommitSpec::_Internal::content(const CommitSpec* msg) {
  return *msg->content_;
}
void CommitSpec::clear_content() {
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
}
CommitSpec::CommitSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbcommit.CommitSpec)
}
CommitSpec::CommitSpec(const CommitSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_content()) {
    content_ = new ::pbcontent::ContentSpec(*from.content_);
  } else {
    content_ = nullptr;
  }
  content_id_ = from.content_id_;
  // @@protoc_insertion_point(copy_constructor:pbcommit.CommitSpec)
}

inline void CommitSpec::SharedCtor() {
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&content_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&content_id_) -
    reinterpret_cast<char*>(&content_)) + sizeof(content_id_));
}

CommitSpec::~CommitSpec() {
  // @@protoc_insertion_point(destructor:pbcommit.CommitSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommitSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_;
}

void CommitSpec::ArenaDtor(void* object) {
  CommitSpec* _this = reinterpret_cast< CommitSpec* >(object);
  (void)_this;
}
void CommitSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:pbcommit.CommitSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  content_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 content_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          content_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbcontent.ContentSpec content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbcommit.CommitSpec.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcommit.CommitSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 content_id = 1;
  if (this->_internal_content_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_content_id(), target);
  }

  // .pbcontent.ContentSpec content = 2;
  if (this->_internal_has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::content(this), target, stream);
  }

  // string memo = 3;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbcommit.CommitSpec.memo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcommit.CommitSpec)
  return target;
}

size_t CommitSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbcommit.CommitSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memo = 3;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // .pbcontent.ContentSpec content = 2;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // uint32 content_id = 1;
  if (this->_internal_content_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_content_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitSpec::GetClassData() const { return &_class_data_; }

void CommitSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitSpec *>(to)->MergeFrom(
      static_cast<const CommitSpec &>(from));
}


void CommitSpec::MergeFrom(const CommitSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbcommit.CommitSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_has_content()) {
    _internal_mutable_content()->::pbcontent::ContentSpec::MergeFrom(from._internal_content());
  }
  if (from._internal_content_id() != 0) {
    _internal_set_content_id(from._internal_content_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitSpec::CopyFrom(const CommitSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbcommit.CommitSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitSpec::IsInitialized() const {
  return true;
}

void CommitSpec::InternalSwap(CommitSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitSpec, content_id_)
      + sizeof(CommitSpec::content_id_)
      - PROTOBUF_FIELD_OFFSET(CommitSpec, content_)>(
          reinterpret_cast<char*>(&content_),
          reinterpret_cast<char*>(&other->content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto[1]);
}

// ===================================================================

class ReleasedCommitSpec::_Internal {
 public:
  static const ::pbcontent::ReleasedContentSpec& content(const ReleasedCommitSpec* msg);
};

const ::pbcontent::ReleasedContentSpec&
ReleasedCommitSpec::_Internal::content(const ReleasedCommitSpec* msg) {
  return *msg->content_;
}
void ReleasedCommitSpec::clear_content() {
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
}
ReleasedCommitSpec::ReleasedCommitSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbcommit.ReleasedCommitSpec)
}
ReleasedCommitSpec::ReleasedCommitSpec(const ReleasedCommitSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memo(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_content()) {
    content_ = new ::pbcontent::ReleasedContentSpec(*from.content_);
  } else {
    content_ = nullptr;
  }
  content_id_ = from.content_id_;
  // @@protoc_insertion_point(copy_constructor:pbcommit.ReleasedCommitSpec)
}

inline void ReleasedCommitSpec::SharedCtor() {
memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&content_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&content_id_) -
    reinterpret_cast<char*>(&content_)) + sizeof(content_id_));
}

ReleasedCommitSpec::~ReleasedCommitSpec() {
  // @@protoc_insertion_point(destructor:pbcommit.ReleasedCommitSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReleasedCommitSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_;
}

void ReleasedCommitSpec::ArenaDtor(void* object) {
  ReleasedCommitSpec* _this = reinterpret_cast< ReleasedCommitSpec* >(object);
  (void)_this;
}
void ReleasedCommitSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleasedCommitSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReleasedCommitSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:pbcommit.ReleasedCommitSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memo_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
  content_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleasedCommitSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 content_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          content_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbcontent.ReleasedContentSpec content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_content(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string memo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbcommit.ReleasedCommitSpec.memo"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleasedCommitSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcommit.ReleasedCommitSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 content_id = 1;
  if (this->_internal_content_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_content_id(), target);
  }

  // .pbcontent.ReleasedContentSpec content = 2;
  if (this->_internal_has_content()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::content(this), target, stream);
  }

  // string memo = 3;
  if (!this->_internal_memo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbcommit.ReleasedCommitSpec.memo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcommit.ReleasedCommitSpec)
  return target;
}

size_t ReleasedCommitSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbcommit.ReleasedCommitSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string memo = 3;
  if (!this->_internal_memo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // .pbcontent.ReleasedContentSpec content = 2;
  if (this->_internal_has_content()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *content_);
  }

  // uint32 content_id = 1;
  if (this->_internal_content_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_content_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleasedCommitSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReleasedCommitSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleasedCommitSpec::GetClassData() const { return &_class_data_; }

void ReleasedCommitSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReleasedCommitSpec *>(to)->MergeFrom(
      static_cast<const ReleasedCommitSpec &>(from));
}


void ReleasedCommitSpec::MergeFrom(const ReleasedCommitSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbcommit.ReleasedCommitSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_memo().empty()) {
    _internal_set_memo(from._internal_memo());
  }
  if (from._internal_has_content()) {
    _internal_mutable_content()->::pbcontent::ReleasedContentSpec::MergeFrom(from._internal_content());
  }
  if (from._internal_content_id() != 0) {
    _internal_set_content_id(from._internal_content_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleasedCommitSpec::CopyFrom(const ReleasedCommitSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbcommit.ReleasedCommitSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleasedCommitSpec::IsInitialized() const {
  return true;
}

void ReleasedCommitSpec::InternalSwap(ReleasedCommitSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memo_, lhs_arena,
      &other->memo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReleasedCommitSpec, content_id_)
      + sizeof(ReleasedCommitSpec::content_id_)
      - PROTOBUF_FIELD_OFFSET(ReleasedCommitSpec, content_)>(
          reinterpret_cast<char*>(&content_),
          reinterpret_cast<char*>(&other->content_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleasedCommitSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto[2]);
}

// ===================================================================

class CommitAttachment::_Internal {
 public:
};

CommitAttachment::CommitAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbcommit.CommitAttachment)
}
CommitAttachment::CommitAttachment(const CommitAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&biz_id_, &from.biz_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_item_id_) -
    reinterpret_cast<char*>(&biz_id_)) + sizeof(config_item_id_));
  // @@protoc_insertion_point(copy_constructor:pbcommit.CommitAttachment)
}

inline void CommitAttachment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&biz_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&config_item_id_) -
    reinterpret_cast<char*>(&biz_id_)) + sizeof(config_item_id_));
}

CommitAttachment::~CommitAttachment() {
  // @@protoc_insertion_point(destructor:pbcommit.CommitAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommitAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommitAttachment::ArenaDtor(void* object) {
  CommitAttachment* _this = reinterpret_cast< CommitAttachment* >(object);
  (void)_this;
}
void CommitAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:pbcommit.CommitAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&biz_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_item_id_) -
      reinterpret_cast<char*>(&biz_id_)) + sizeof(config_item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 biz_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          biz_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 config_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          config_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcommit.CommitAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 biz_id = 1;
  if (this->_internal_biz_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_biz_id(), target);
  }

  // uint32 app_id = 2;
  if (this->_internal_app_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // uint32 config_item_id = 3;
  if (this->_internal_config_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_config_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcommit.CommitAttachment)
  return target;
}

size_t CommitAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbcommit.CommitAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 biz_id = 1;
  if (this->_internal_biz_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_biz_id());
  }

  // uint32 app_id = 2;
  if (this->_internal_app_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  // uint32 config_item_id = 3;
  if (this->_internal_config_item_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_config_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitAttachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitAttachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitAttachment::GetClassData() const { return &_class_data_; }

void CommitAttachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitAttachment *>(to)->MergeFrom(
      static_cast<const CommitAttachment &>(from));
}


void CommitAttachment::MergeFrom(const CommitAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbcommit.CommitAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_biz_id() != 0) {
    _internal_set_biz_id(from._internal_biz_id());
  }
  if (from._internal_app_id() != 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_config_item_id() != 0) {
    _internal_set_config_item_id(from._internal_config_item_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitAttachment::CopyFrom(const CommitAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbcommit.CommitAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitAttachment::IsInitialized() const {
  return true;
}

void CommitAttachment::InternalSwap(CommitAttachment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitAttachment, config_item_id_)
      + sizeof(CommitAttachment::config_item_id_)
      - PROTOBUF_FIELD_OFFSET(CommitAttachment, biz_id_)>(
          reinterpret_cast<char*>(&biz_id_),
          reinterpret_cast<char*>(&other->biz_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitAttachment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fcommit_2fcommit_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbcommit
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbcommit::Commit* Arena::CreateMaybeMessage< ::pbcommit::Commit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbcommit::Commit >(arena);
}
template<> PROTOBUF_NOINLINE ::pbcommit::CommitSpec* Arena::CreateMaybeMessage< ::pbcommit::CommitSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbcommit::CommitSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::pbcommit::ReleasedCommitSpec* Arena::CreateMaybeMessage< ::pbcommit::ReleasedCommitSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbcommit::ReleasedCommitSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::pbcommit::CommitAttachment* Arena::CreateMaybeMessage< ::pbcommit::CommitAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbcommit::CommitAttachment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
