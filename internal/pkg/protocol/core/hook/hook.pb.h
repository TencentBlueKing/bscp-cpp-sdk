// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/protocol/core/hook/hook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pkg/protocol/core/base/base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto;
namespace pbhook {
class CountHookTags;
struct CountHookTagsDefaultTypeInternal;
extern CountHookTagsDefaultTypeInternal _CountHookTags_default_instance_;
class Hook;
struct HookDefaultTypeInternal;
extern HookDefaultTypeInternal _Hook_default_instance_;
class HookAttachment;
struct HookAttachmentDefaultTypeInternal;
extern HookAttachmentDefaultTypeInternal _HookAttachment_default_instance_;
class HookSpec;
struct HookSpecDefaultTypeInternal;
extern HookSpecDefaultTypeInternal _HookSpec_default_instance_;
class ListHookTagCounts;
struct ListHookTagCountsDefaultTypeInternal;
extern ListHookTagCountsDefaultTypeInternal _ListHookTagCounts_default_instance_;
}  // namespace pbhook
PROTOBUF_NAMESPACE_OPEN
template<> ::pbhook::CountHookTags* Arena::CreateMaybeMessage<::pbhook::CountHookTags>(Arena*);
template<> ::pbhook::Hook* Arena::CreateMaybeMessage<::pbhook::Hook>(Arena*);
template<> ::pbhook::HookAttachment* Arena::CreateMaybeMessage<::pbhook::HookAttachment>(Arena*);
template<> ::pbhook::HookSpec* Arena::CreateMaybeMessage<::pbhook::HookSpec>(Arena*);
template<> ::pbhook::ListHookTagCounts* Arena::CreateMaybeMessage<::pbhook::ListHookTagCounts>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbhook {

// ===================================================================

class Hook final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbhook.Hook) */ {
 public:
  inline Hook() : Hook(nullptr) {}
  ~Hook() override;
  explicit constexpr Hook(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hook(const Hook& from);
  Hook(Hook&& from) noexcept
    : Hook() {
    *this = ::std::move(from);
  }

  inline Hook& operator=(const Hook& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hook& operator=(Hook&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hook& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hook* internal_default_instance() {
    return reinterpret_cast<const Hook*>(
               &_Hook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Hook& a, Hook& b) {
    a.Swap(&b);
  }
  inline void Swap(Hook* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hook* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hook* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hook>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hook& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Hook& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hook* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbhook.Hook";
  }
  protected:
  explicit Hook(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 2,
    kAttachmentFieldNumber = 3,
    kRevisionFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // .pbhook.HookSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::pbhook::HookSpec& spec() const;
  PROTOBUF_NODISCARD ::pbhook::HookSpec* release_spec();
  ::pbhook::HookSpec* mutable_spec();
  void set_allocated_spec(::pbhook::HookSpec* spec);
  private:
  const ::pbhook::HookSpec& _internal_spec() const;
  ::pbhook::HookSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::pbhook::HookSpec* spec);
  ::pbhook::HookSpec* unsafe_arena_release_spec();

  // .pbhook.HookAttachment attachment = 3;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::pbhook::HookAttachment& attachment() const;
  PROTOBUF_NODISCARD ::pbhook::HookAttachment* release_attachment();
  ::pbhook::HookAttachment* mutable_attachment();
  void set_allocated_attachment(::pbhook::HookAttachment* attachment);
  private:
  const ::pbhook::HookAttachment& _internal_attachment() const;
  ::pbhook::HookAttachment* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::pbhook::HookAttachment* attachment);
  ::pbhook::HookAttachment* unsafe_arena_release_attachment();

  // .pbbase.Revision revision = 4;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const ::pbbase::Revision& revision() const;
  PROTOBUF_NODISCARD ::pbbase::Revision* release_revision();
  ::pbbase::Revision* mutable_revision();
  void set_allocated_revision(::pbbase::Revision* revision);
  private:
  const ::pbbase::Revision& _internal_revision() const;
  ::pbbase::Revision* _internal_mutable_revision();
  public:
  void unsafe_arena_set_allocated_revision(
      ::pbbase::Revision* revision);
  ::pbbase::Revision* unsafe_arena_release_revision();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbhook.Hook)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pbhook::HookSpec* spec_;
  ::pbhook::HookAttachment* attachment_;
  ::pbbase::Revision* revision_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto;
};
// -------------------------------------------------------------------

class HookSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbhook.HookSpec) */ {
 public:
  inline HookSpec() : HookSpec(nullptr) {}
  ~HookSpec() override;
  explicit constexpr HookSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HookSpec(const HookSpec& from);
  HookSpec(HookSpec&& from) noexcept
    : HookSpec() {
    *this = ::std::move(from);
  }

  inline HookSpec& operator=(const HookSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline HookSpec& operator=(HookSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HookSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const HookSpec* internal_default_instance() {
    return reinterpret_cast<const HookSpec*>(
               &_HookSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HookSpec& a, HookSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(HookSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HookSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HookSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HookSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HookSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HookSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HookSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbhook.HookSpec";
  }
  protected:
  explicit HookSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kTagFieldNumber = 3,
    kMemoFieldNumber = 4,
    kContentFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string tag = 3;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string memo = 4;
  void clear_memo();
  const std::string& memo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_memo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // string content = 5;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:pbhook.HookSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto;
};
// -------------------------------------------------------------------

class HookAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbhook.HookAttachment) */ {
 public:
  inline HookAttachment() : HookAttachment(nullptr) {}
  ~HookAttachment() override;
  explicit constexpr HookAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HookAttachment(const HookAttachment& from);
  HookAttachment(HookAttachment&& from) noexcept
    : HookAttachment() {
    *this = ::std::move(from);
  }

  inline HookAttachment& operator=(const HookAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline HookAttachment& operator=(HookAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HookAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const HookAttachment* internal_default_instance() {
    return reinterpret_cast<const HookAttachment*>(
               &_HookAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HookAttachment& a, HookAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(HookAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HookAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HookAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HookAttachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HookAttachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HookAttachment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HookAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbhook.HookAttachment";
  }
  protected:
  explicit HookAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBizIdFieldNumber = 1,
  };
  // uint32 biz_id = 1;
  void clear_biz_id();
  uint32_t biz_id() const;
  void set_biz_id(uint32_t value);
  private:
  uint32_t _internal_biz_id() const;
  void _internal_set_biz_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbhook.HookAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t biz_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto;
};
// -------------------------------------------------------------------

class ListHookTagCounts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbhook.ListHookTagCounts) */ {
 public:
  inline ListHookTagCounts() : ListHookTagCounts(nullptr) {}
  ~ListHookTagCounts() override;
  explicit constexpr ListHookTagCounts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListHookTagCounts(const ListHookTagCounts& from);
  ListHookTagCounts(ListHookTagCounts&& from) noexcept
    : ListHookTagCounts() {
    *this = ::std::move(from);
  }

  inline ListHookTagCounts& operator=(const ListHookTagCounts& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHookTagCounts& operator=(ListHookTagCounts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListHookTagCounts& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListHookTagCounts* internal_default_instance() {
    return reinterpret_cast<const ListHookTagCounts*>(
               &_ListHookTagCounts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListHookTagCounts& a, ListHookTagCounts& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHookTagCounts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHookTagCounts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListHookTagCounts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListHookTagCounts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListHookTagCounts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListHookTagCounts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHookTagCounts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbhook.ListHookTagCounts";
  }
  protected:
  explicit ListHookTagCounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kUpdateAtFieldNumber = 4,
    kAppIdFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // string tag = 2;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string update_at = 4;
  void clear_update_at();
  const std::string& update_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_at();
  PROTOBUF_NODISCARD std::string* release_update_at();
  void set_allocated_update_at(std::string* update_at);
  private:
  const std::string& _internal_update_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_at(const std::string& value);
  std::string* _internal_mutable_update_at();
  public:

  // uint32 app_id = 1;
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // uint32 count = 3;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbhook.ListHookTagCounts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_at_;
  uint32_t app_id_;
  uint32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto;
};
// -------------------------------------------------------------------

class CountHookTags final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbhook.CountHookTags) */ {
 public:
  inline CountHookTags() : CountHookTags(nullptr) {}
  ~CountHookTags() override;
  explicit constexpr CountHookTags(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CountHookTags(const CountHookTags& from);
  CountHookTags(CountHookTags&& from) noexcept
    : CountHookTags() {
    *this = ::std::move(from);
  }

  inline CountHookTags& operator=(const CountHookTags& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountHookTags& operator=(CountHookTags&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CountHookTags& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountHookTags* internal_default_instance() {
    return reinterpret_cast<const CountHookTags*>(
               &_CountHookTags_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CountHookTags& a, CountHookTags& b) {
    a.Swap(&b);
  }
  inline void Swap(CountHookTags* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountHookTags* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CountHookTags* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CountHookTags>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CountHookTags& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CountHookTags& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountHookTags* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbhook.CountHookTags";
  }
  protected:
  explicit CountHookTags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kCountsFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // uint32 counts = 2;
  void clear_counts();
  uint32_t counts() const;
  void set_counts(uint32_t value);
  private:
  uint32_t _internal_counts() const;
  void _internal_set_counts(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbhook.CountHookTags)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  uint32_t counts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Hook

// uint32 id = 1;
inline void Hook::clear_id() {
  id_ = 0u;
}
inline uint32_t Hook::_internal_id() const {
  return id_;
}
inline uint32_t Hook::id() const {
  // @@protoc_insertion_point(field_get:pbhook.Hook.id)
  return _internal_id();
}
inline void Hook::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Hook::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pbhook.Hook.id)
}

// .pbhook.HookSpec spec = 2;
inline bool Hook::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Hook::has_spec() const {
  return _internal_has_spec();
}
inline void Hook::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::pbhook::HookSpec& Hook::_internal_spec() const {
  const ::pbhook::HookSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbhook::HookSpec&>(
      ::pbhook::_HookSpec_default_instance_);
}
inline const ::pbhook::HookSpec& Hook::spec() const {
  // @@protoc_insertion_point(field_get:pbhook.Hook.spec)
  return _internal_spec();
}
inline void Hook::unsafe_arena_set_allocated_spec(
    ::pbhook::HookSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbhook.Hook.spec)
}
inline ::pbhook::HookSpec* Hook::release_spec() {
  
  ::pbhook::HookSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbhook::HookSpec* Hook::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:pbhook.Hook.spec)
  
  ::pbhook::HookSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::pbhook::HookSpec* Hook::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbhook::HookSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::pbhook::HookSpec* Hook::mutable_spec() {
  ::pbhook::HookSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:pbhook.Hook.spec)
  return _msg;
}
inline void Hook::set_allocated_spec(::pbhook::HookSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbhook::HookSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:pbhook.Hook.spec)
}

// .pbhook.HookAttachment attachment = 3;
inline bool Hook::_internal_has_attachment() const {
  return this != internal_default_instance() && attachment_ != nullptr;
}
inline bool Hook::has_attachment() const {
  return _internal_has_attachment();
}
inline void Hook::clear_attachment() {
  if (GetArenaForAllocation() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
}
inline const ::pbhook::HookAttachment& Hook::_internal_attachment() const {
  const ::pbhook::HookAttachment* p = attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbhook::HookAttachment&>(
      ::pbhook::_HookAttachment_default_instance_);
}
inline const ::pbhook::HookAttachment& Hook::attachment() const {
  // @@protoc_insertion_point(field_get:pbhook.Hook.attachment)
  return _internal_attachment();
}
inline void Hook::unsafe_arena_set_allocated_attachment(
    ::pbhook::HookAttachment* attachment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbhook.Hook.attachment)
}
inline ::pbhook::HookAttachment* Hook::release_attachment() {
  
  ::pbhook::HookAttachment* temp = attachment_;
  attachment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbhook::HookAttachment* Hook::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:pbhook.Hook.attachment)
  
  ::pbhook::HookAttachment* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::pbhook::HookAttachment* Hook::_internal_mutable_attachment() {
  
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbhook::HookAttachment>(GetArenaForAllocation());
    attachment_ = p;
  }
  return attachment_;
}
inline ::pbhook::HookAttachment* Hook::mutable_attachment() {
  ::pbhook::HookAttachment* _msg = _internal_mutable_attachment();
  // @@protoc_insertion_point(field_mutable:pbhook.Hook.attachment)
  return _msg;
}
inline void Hook::set_allocated_attachment(::pbhook::HookAttachment* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachment_;
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbhook::HookAttachment>::GetOwningArena(attachment);
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    
  } else {
    
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:pbhook.Hook.attachment)
}

// .pbbase.Revision revision = 4;
inline bool Hook::_internal_has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline bool Hook::has_revision() const {
  return _internal_has_revision();
}
inline const ::pbbase::Revision& Hook::_internal_revision() const {
  const ::pbbase::Revision* p = revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbbase::Revision&>(
      ::pbbase::_Revision_default_instance_);
}
inline const ::pbbase::Revision& Hook::revision() const {
  // @@protoc_insertion_point(field_get:pbhook.Hook.revision)
  return _internal_revision();
}
inline void Hook::unsafe_arena_set_allocated_revision(
    ::pbbase::Revision* revision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  revision_ = revision;
  if (revision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbhook.Hook.revision)
}
inline ::pbbase::Revision* Hook::release_revision() {
  
  ::pbbase::Revision* temp = revision_;
  revision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbbase::Revision* Hook::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_release:pbhook.Hook.revision)
  
  ::pbbase::Revision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::pbbase::Revision* Hook::_internal_mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbbase::Revision>(GetArenaForAllocation());
    revision_ = p;
  }
  return revision_;
}
inline ::pbbase::Revision* Hook::mutable_revision() {
  ::pbbase::Revision* _msg = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:pbhook.Hook.revision)
  return _msg;
}
inline void Hook::set_allocated_revision(::pbbase::Revision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision));
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:pbhook.Hook.revision)
}

// -------------------------------------------------------------------

// HookSpec

// string name = 1;
inline void HookSpec::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HookSpec::name() const {
  // @@protoc_insertion_point(field_get:pbhook.HookSpec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HookSpec::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbhook.HookSpec.name)
}
inline std::string* HookSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pbhook.HookSpec.name)
  return _s;
}
inline const std::string& HookSpec::_internal_name() const {
  return name_.Get();
}
inline void HookSpec::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HookSpec::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HookSpec::release_name() {
  // @@protoc_insertion_point(field_release:pbhook.HookSpec.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HookSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbhook.HookSpec.name)
}

// string type = 2;
inline void HookSpec::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& HookSpec::type() const {
  // @@protoc_insertion_point(field_get:pbhook.HookSpec.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HookSpec::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbhook.HookSpec.type)
}
inline std::string* HookSpec::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:pbhook.HookSpec.type)
  return _s;
}
inline const std::string& HookSpec::_internal_type() const {
  return type_.Get();
}
inline void HookSpec::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HookSpec::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HookSpec::release_type() {
  // @@protoc_insertion_point(field_release:pbhook.HookSpec.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HookSpec::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbhook.HookSpec.type)
}

// string tag = 3;
inline void HookSpec::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& HookSpec::tag() const {
  // @@protoc_insertion_point(field_get:pbhook.HookSpec.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HookSpec::set_tag(ArgT0&& arg0, ArgT... args) {
 
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbhook.HookSpec.tag)
}
inline std::string* HookSpec::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:pbhook.HookSpec.tag)
  return _s;
}
inline const std::string& HookSpec::_internal_tag() const {
  return tag_.Get();
}
inline void HookSpec::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HookSpec::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HookSpec::release_tag() {
  // @@protoc_insertion_point(field_release:pbhook.HookSpec.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HookSpec::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbhook.HookSpec.tag)
}

// string memo = 4;
inline void HookSpec::clear_memo() {
  memo_.ClearToEmpty();
}
inline const std::string& HookSpec::memo() const {
  // @@protoc_insertion_point(field_get:pbhook.HookSpec.memo)
  return _internal_memo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HookSpec::set_memo(ArgT0&& arg0, ArgT... args) {
 
 memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbhook.HookSpec.memo)
}
inline std::string* HookSpec::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:pbhook.HookSpec.memo)
  return _s;
}
inline const std::string& HookSpec::_internal_memo() const {
  return memo_.Get();
}
inline void HookSpec::_internal_set_memo(const std::string& value) {
  
  memo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HookSpec::_internal_mutable_memo() {
  
  return memo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HookSpec::release_memo() {
  // @@protoc_insertion_point(field_release:pbhook.HookSpec.memo)
  return memo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HookSpec::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (memo_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    memo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbhook.HookSpec.memo)
}

// string content = 5;
inline void HookSpec::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& HookSpec::content() const {
  // @@protoc_insertion_point(field_get:pbhook.HookSpec.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HookSpec::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbhook.HookSpec.content)
}
inline std::string* HookSpec::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:pbhook.HookSpec.content)
  return _s;
}
inline const std::string& HookSpec::_internal_content() const {
  return content_.Get();
}
inline void HookSpec::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HookSpec::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HookSpec::release_content() {
  // @@protoc_insertion_point(field_release:pbhook.HookSpec.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HookSpec::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbhook.HookSpec.content)
}

// -------------------------------------------------------------------

// HookAttachment

// uint32 biz_id = 1;
inline void HookAttachment::clear_biz_id() {
  biz_id_ = 0u;
}
inline uint32_t HookAttachment::_internal_biz_id() const {
  return biz_id_;
}
inline uint32_t HookAttachment::biz_id() const {
  // @@protoc_insertion_point(field_get:pbhook.HookAttachment.biz_id)
  return _internal_biz_id();
}
inline void HookAttachment::_internal_set_biz_id(uint32_t value) {
  
  biz_id_ = value;
}
inline void HookAttachment::set_biz_id(uint32_t value) {
  _internal_set_biz_id(value);
  // @@protoc_insertion_point(field_set:pbhook.HookAttachment.biz_id)
}

// -------------------------------------------------------------------

// ListHookTagCounts

// uint32 app_id = 1;
inline void ListHookTagCounts::clear_app_id() {
  app_id_ = 0u;
}
inline uint32_t ListHookTagCounts::_internal_app_id() const {
  return app_id_;
}
inline uint32_t ListHookTagCounts::app_id() const {
  // @@protoc_insertion_point(field_get:pbhook.ListHookTagCounts.app_id)
  return _internal_app_id();
}
inline void ListHookTagCounts::_internal_set_app_id(uint32_t value) {
  
  app_id_ = value;
}
inline void ListHookTagCounts::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:pbhook.ListHookTagCounts.app_id)
}

// string tag = 2;
inline void ListHookTagCounts::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& ListHookTagCounts::tag() const {
  // @@protoc_insertion_point(field_get:pbhook.ListHookTagCounts.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHookTagCounts::set_tag(ArgT0&& arg0, ArgT... args) {
 
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbhook.ListHookTagCounts.tag)
}
inline std::string* ListHookTagCounts::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:pbhook.ListHookTagCounts.tag)
  return _s;
}
inline const std::string& ListHookTagCounts::_internal_tag() const {
  return tag_.Get();
}
inline void ListHookTagCounts::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListHookTagCounts::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListHookTagCounts::release_tag() {
  // @@protoc_insertion_point(field_release:pbhook.ListHookTagCounts.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListHookTagCounts::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbhook.ListHookTagCounts.tag)
}

// uint32 count = 3;
inline void ListHookTagCounts::clear_count() {
  count_ = 0u;
}
inline uint32_t ListHookTagCounts::_internal_count() const {
  return count_;
}
inline uint32_t ListHookTagCounts::count() const {
  // @@protoc_insertion_point(field_get:pbhook.ListHookTagCounts.count)
  return _internal_count();
}
inline void ListHookTagCounts::_internal_set_count(uint32_t value) {
  
  count_ = value;
}
inline void ListHookTagCounts::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:pbhook.ListHookTagCounts.count)
}

// string update_at = 4;
inline void ListHookTagCounts::clear_update_at() {
  update_at_.ClearToEmpty();
}
inline const std::string& ListHookTagCounts::update_at() const {
  // @@protoc_insertion_point(field_get:pbhook.ListHookTagCounts.update_at)
  return _internal_update_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListHookTagCounts::set_update_at(ArgT0&& arg0, ArgT... args) {
 
 update_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbhook.ListHookTagCounts.update_at)
}
inline std::string* ListHookTagCounts::mutable_update_at() {
  std::string* _s = _internal_mutable_update_at();
  // @@protoc_insertion_point(field_mutable:pbhook.ListHookTagCounts.update_at)
  return _s;
}
inline const std::string& ListHookTagCounts::_internal_update_at() const {
  return update_at_.Get();
}
inline void ListHookTagCounts::_internal_set_update_at(const std::string& value) {
  
  update_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListHookTagCounts::_internal_mutable_update_at() {
  
  return update_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListHookTagCounts::release_update_at() {
  // @@protoc_insertion_point(field_release:pbhook.ListHookTagCounts.update_at)
  return update_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListHookTagCounts::set_allocated_update_at(std::string* update_at) {
  if (update_at != nullptr) {
    
  } else {
    
  }
  update_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_at,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (update_at_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    update_at_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbhook.ListHookTagCounts.update_at)
}

// -------------------------------------------------------------------

// CountHookTags

// string tag = 1;
inline void CountHookTags::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& CountHookTags::tag() const {
  // @@protoc_insertion_point(field_get:pbhook.CountHookTags.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CountHookTags::set_tag(ArgT0&& arg0, ArgT... args) {
 
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbhook.CountHookTags.tag)
}
inline std::string* CountHookTags::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:pbhook.CountHookTags.tag)
  return _s;
}
inline const std::string& CountHookTags::_internal_tag() const {
  return tag_.Get();
}
inline void CountHookTags::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CountHookTags::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CountHookTags::release_tag() {
  // @@protoc_insertion_point(field_release:pbhook.CountHookTags.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CountHookTags::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbhook.CountHookTags.tag)
}

// uint32 counts = 2;
inline void CountHookTags::clear_counts() {
  counts_ = 0u;
}
inline uint32_t CountHookTags::_internal_counts() const {
  return counts_;
}
inline uint32_t CountHookTags::counts() const {
  // @@protoc_insertion_point(field_get:pbhook.CountHookTags.counts)
  return _internal_counts();
}
inline void CountHookTags::_internal_set_counts(uint32_t value) {
  
  counts_ = value;
}
inline void CountHookTags::set_counts(uint32_t value) {
  _internal_set_counts(value);
  // @@protoc_insertion_point(field_set:pbhook.CountHookTags.counts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbhook

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fhook_2fhook_2eproto
