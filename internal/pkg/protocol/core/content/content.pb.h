// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/protocol/core/content/content.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pkg/protocol/core/base/base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto;
namespace pbcontent {
class Content;
struct ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;
class ContentAttachment;
struct ContentAttachmentDefaultTypeInternal;
extern ContentAttachmentDefaultTypeInternal _ContentAttachment_default_instance_;
class ContentSpec;
struct ContentSpecDefaultTypeInternal;
extern ContentSpecDefaultTypeInternal _ContentSpec_default_instance_;
class ReleasedContentSpec;
struct ReleasedContentSpecDefaultTypeInternal;
extern ReleasedContentSpecDefaultTypeInternal _ReleasedContentSpec_default_instance_;
}  // namespace pbcontent
PROTOBUF_NAMESPACE_OPEN
template<> ::pbcontent::Content* Arena::CreateMaybeMessage<::pbcontent::Content>(Arena*);
template<> ::pbcontent::ContentAttachment* Arena::CreateMaybeMessage<::pbcontent::ContentAttachment>(Arena*);
template<> ::pbcontent::ContentSpec* Arena::CreateMaybeMessage<::pbcontent::ContentSpec>(Arena*);
template<> ::pbcontent::ReleasedContentSpec* Arena::CreateMaybeMessage<::pbcontent::ReleasedContentSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbcontent {

// ===================================================================

class Content final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbcontent.Content) */ {
 public:
  inline Content() : Content(nullptr) {}
  ~Content() override;
  explicit constexpr Content(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Content(const Content& from);
  Content(Content&& from) noexcept
    : Content() {
    *this = ::std::move(from);
  }

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Content& operator=(Content&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Content& default_instance() {
    return *internal_default_instance();
  }
  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Content& a, Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Content* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Content* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Content>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Content& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Content& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Content* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbcontent.Content";
  }
  protected:
  explicit Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 2,
    kAttachmentFieldNumber = 3,
    kRevisionFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // .pbcontent.ContentSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::pbcontent::ContentSpec& spec() const;
  PROTOBUF_NODISCARD ::pbcontent::ContentSpec* release_spec();
  ::pbcontent::ContentSpec* mutable_spec();
  void set_allocated_spec(::pbcontent::ContentSpec* spec);
  private:
  const ::pbcontent::ContentSpec& _internal_spec() const;
  ::pbcontent::ContentSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::pbcontent::ContentSpec* spec);
  ::pbcontent::ContentSpec* unsafe_arena_release_spec();

  // .pbcontent.ContentAttachment attachment = 3;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::pbcontent::ContentAttachment& attachment() const;
  PROTOBUF_NODISCARD ::pbcontent::ContentAttachment* release_attachment();
  ::pbcontent::ContentAttachment* mutable_attachment();
  void set_allocated_attachment(::pbcontent::ContentAttachment* attachment);
  private:
  const ::pbcontent::ContentAttachment& _internal_attachment() const;
  ::pbcontent::ContentAttachment* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::pbcontent::ContentAttachment* attachment);
  ::pbcontent::ContentAttachment* unsafe_arena_release_attachment();

  // .pbbase.CreatedRevision revision = 4;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const ::pbbase::CreatedRevision& revision() const;
  PROTOBUF_NODISCARD ::pbbase::CreatedRevision* release_revision();
  ::pbbase::CreatedRevision* mutable_revision();
  void set_allocated_revision(::pbbase::CreatedRevision* revision);
  private:
  const ::pbbase::CreatedRevision& _internal_revision() const;
  ::pbbase::CreatedRevision* _internal_mutable_revision();
  public:
  void unsafe_arena_set_allocated_revision(
      ::pbbase::CreatedRevision* revision);
  ::pbbase::CreatedRevision* unsafe_arena_release_revision();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbcontent.Content)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pbcontent::ContentSpec* spec_;
  ::pbcontent::ContentAttachment* attachment_;
  ::pbbase::CreatedRevision* revision_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto;
};
// -------------------------------------------------------------------

class ContentSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbcontent.ContentSpec) */ {
 public:
  inline ContentSpec() : ContentSpec(nullptr) {}
  ~ContentSpec() override;
  explicit constexpr ContentSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentSpec(const ContentSpec& from);
  ContentSpec(ContentSpec&& from) noexcept
    : ContentSpec() {
    *this = ::std::move(from);
  }

  inline ContentSpec& operator=(const ContentSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentSpec& operator=(ContentSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentSpec* internal_default_instance() {
    return reinterpret_cast<const ContentSpec*>(
               &_ContentSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContentSpec& a, ContentSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbcontent.ContentSpec";
  }
  protected:
  explicit ContentSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kByteSizeFieldNumber = 2,
  };
  // string signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // uint64 byte_size = 2;
  void clear_byte_size();
  uint64_t byte_size() const;
  void set_byte_size(uint64_t value);
  private:
  uint64_t _internal_byte_size() const;
  void _internal_set_byte_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbcontent.ContentSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  uint64_t byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto;
};
// -------------------------------------------------------------------

class ReleasedContentSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbcontent.ReleasedContentSpec) */ {
 public:
  inline ReleasedContentSpec() : ReleasedContentSpec(nullptr) {}
  ~ReleasedContentSpec() override;
  explicit constexpr ReleasedContentSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReleasedContentSpec(const ReleasedContentSpec& from);
  ReleasedContentSpec(ReleasedContentSpec&& from) noexcept
    : ReleasedContentSpec() {
    *this = ::std::move(from);
  }

  inline ReleasedContentSpec& operator=(const ReleasedContentSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReleasedContentSpec& operator=(ReleasedContentSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReleasedContentSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReleasedContentSpec* internal_default_instance() {
    return reinterpret_cast<const ReleasedContentSpec*>(
               &_ReleasedContentSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReleasedContentSpec& a, ReleasedContentSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(ReleasedContentSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReleasedContentSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReleasedContentSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReleasedContentSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReleasedContentSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReleasedContentSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleasedContentSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbcontent.ReleasedContentSpec";
  }
  protected:
  explicit ReleasedContentSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kOriginSignatureFieldNumber = 3,
    kByteSizeFieldNumber = 2,
    kOriginByteSizeFieldNumber = 4,
  };
  // string signature = 1;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // string origin_signature = 3;
  void clear_origin_signature();
  const std::string& origin_signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin_signature();
  PROTOBUF_NODISCARD std::string* release_origin_signature();
  void set_allocated_origin_signature(std::string* origin_signature);
  private:
  const std::string& _internal_origin_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin_signature(const std::string& value);
  std::string* _internal_mutable_origin_signature();
  public:

  // uint64 byte_size = 2;
  void clear_byte_size();
  uint64_t byte_size() const;
  void set_byte_size(uint64_t value);
  private:
  uint64_t _internal_byte_size() const;
  void _internal_set_byte_size(uint64_t value);
  public:

  // uint64 origin_byte_size = 4;
  void clear_origin_byte_size();
  uint64_t origin_byte_size() const;
  void set_origin_byte_size(uint64_t value);
  private:
  uint64_t _internal_origin_byte_size() const;
  void _internal_set_origin_byte_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbcontent.ReleasedContentSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_signature_;
  uint64_t byte_size_;
  uint64_t origin_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto;
};
// -------------------------------------------------------------------

class ContentAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbcontent.ContentAttachment) */ {
 public:
  inline ContentAttachment() : ContentAttachment(nullptr) {}
  ~ContentAttachment() override;
  explicit constexpr ContentAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentAttachment(const ContentAttachment& from);
  ContentAttachment(ContentAttachment&& from) noexcept
    : ContentAttachment() {
    *this = ::std::move(from);
  }

  inline ContentAttachment& operator=(const ContentAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAttachment& operator=(ContentAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentAttachment* internal_default_instance() {
    return reinterpret_cast<const ContentAttachment*>(
               &_ContentAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContentAttachment& a, ContentAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentAttachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentAttachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ContentAttachment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbcontent.ContentAttachment";
  }
  protected:
  explicit ContentAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBizIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kConfigItemIdFieldNumber = 3,
  };
  // uint32 biz_id = 1;
  void clear_biz_id();
  uint32_t biz_id() const;
  void set_biz_id(uint32_t value);
  private:
  uint32_t _internal_biz_id() const;
  void _internal_set_biz_id(uint32_t value);
  public:

  // uint32 app_id = 2;
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // uint32 config_item_id = 3;
  void clear_config_item_id();
  uint32_t config_item_id() const;
  void set_config_item_id(uint32_t value);
  private:
  uint32_t _internal_config_item_id() const;
  void _internal_set_config_item_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbcontent.ContentAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t biz_id_;
  uint32_t app_id_;
  uint32_t config_item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Content

// uint32 id = 1;
inline void Content::clear_id() {
  id_ = 0u;
}
inline uint32_t Content::_internal_id() const {
  return id_;
}
inline uint32_t Content::id() const {
  // @@protoc_insertion_point(field_get:pbcontent.Content.id)
  return _internal_id();
}
inline void Content::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Content::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pbcontent.Content.id)
}

// .pbcontent.ContentSpec spec = 2;
inline bool Content::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Content::has_spec() const {
  return _internal_has_spec();
}
inline void Content::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::pbcontent::ContentSpec& Content::_internal_spec() const {
  const ::pbcontent::ContentSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbcontent::ContentSpec&>(
      ::pbcontent::_ContentSpec_default_instance_);
}
inline const ::pbcontent::ContentSpec& Content::spec() const {
  // @@protoc_insertion_point(field_get:pbcontent.Content.spec)
  return _internal_spec();
}
inline void Content::unsafe_arena_set_allocated_spec(
    ::pbcontent::ContentSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbcontent.Content.spec)
}
inline ::pbcontent::ContentSpec* Content::release_spec() {
  
  ::pbcontent::ContentSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbcontent::ContentSpec* Content::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:pbcontent.Content.spec)
  
  ::pbcontent::ContentSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::pbcontent::ContentSpec* Content::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbcontent::ContentSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::pbcontent::ContentSpec* Content::mutable_spec() {
  ::pbcontent::ContentSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:pbcontent.Content.spec)
  return _msg;
}
inline void Content::set_allocated_spec(::pbcontent::ContentSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbcontent::ContentSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:pbcontent.Content.spec)
}

// .pbcontent.ContentAttachment attachment = 3;
inline bool Content::_internal_has_attachment() const {
  return this != internal_default_instance() && attachment_ != nullptr;
}
inline bool Content::has_attachment() const {
  return _internal_has_attachment();
}
inline void Content::clear_attachment() {
  if (GetArenaForAllocation() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
}
inline const ::pbcontent::ContentAttachment& Content::_internal_attachment() const {
  const ::pbcontent::ContentAttachment* p = attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbcontent::ContentAttachment&>(
      ::pbcontent::_ContentAttachment_default_instance_);
}
inline const ::pbcontent::ContentAttachment& Content::attachment() const {
  // @@protoc_insertion_point(field_get:pbcontent.Content.attachment)
  return _internal_attachment();
}
inline void Content::unsafe_arena_set_allocated_attachment(
    ::pbcontent::ContentAttachment* attachment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbcontent.Content.attachment)
}
inline ::pbcontent::ContentAttachment* Content::release_attachment() {
  
  ::pbcontent::ContentAttachment* temp = attachment_;
  attachment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbcontent::ContentAttachment* Content::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:pbcontent.Content.attachment)
  
  ::pbcontent::ContentAttachment* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::pbcontent::ContentAttachment* Content::_internal_mutable_attachment() {
  
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbcontent::ContentAttachment>(GetArenaForAllocation());
    attachment_ = p;
  }
  return attachment_;
}
inline ::pbcontent::ContentAttachment* Content::mutable_attachment() {
  ::pbcontent::ContentAttachment* _msg = _internal_mutable_attachment();
  // @@protoc_insertion_point(field_mutable:pbcontent.Content.attachment)
  return _msg;
}
inline void Content::set_allocated_attachment(::pbcontent::ContentAttachment* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachment_;
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbcontent::ContentAttachment>::GetOwningArena(attachment);
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    
  } else {
    
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:pbcontent.Content.attachment)
}

// .pbbase.CreatedRevision revision = 4;
inline bool Content::_internal_has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline bool Content::has_revision() const {
  return _internal_has_revision();
}
inline const ::pbbase::CreatedRevision& Content::_internal_revision() const {
  const ::pbbase::CreatedRevision* p = revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbbase::CreatedRevision&>(
      ::pbbase::_CreatedRevision_default_instance_);
}
inline const ::pbbase::CreatedRevision& Content::revision() const {
  // @@protoc_insertion_point(field_get:pbcontent.Content.revision)
  return _internal_revision();
}
inline void Content::unsafe_arena_set_allocated_revision(
    ::pbbase::CreatedRevision* revision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  revision_ = revision;
  if (revision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbcontent.Content.revision)
}
inline ::pbbase::CreatedRevision* Content::release_revision() {
  
  ::pbbase::CreatedRevision* temp = revision_;
  revision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbbase::CreatedRevision* Content::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_release:pbcontent.Content.revision)
  
  ::pbbase::CreatedRevision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::pbbase::CreatedRevision* Content::_internal_mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbbase::CreatedRevision>(GetArenaForAllocation());
    revision_ = p;
  }
  return revision_;
}
inline ::pbbase::CreatedRevision* Content::mutable_revision() {
  ::pbbase::CreatedRevision* _msg = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:pbcontent.Content.revision)
  return _msg;
}
inline void Content::set_allocated_revision(::pbbase::CreatedRevision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision));
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:pbcontent.Content.revision)
}

// -------------------------------------------------------------------

// ContentSpec

// string signature = 1;
inline void ContentSpec::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& ContentSpec::signature() const {
  // @@protoc_insertion_point(field_get:pbcontent.ContentSpec.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContentSpec::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbcontent.ContentSpec.signature)
}
inline std::string* ContentSpec::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:pbcontent.ContentSpec.signature)
  return _s;
}
inline const std::string& ContentSpec::_internal_signature() const {
  return signature_.Get();
}
inline void ContentSpec::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContentSpec::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContentSpec::release_signature() {
  // @@protoc_insertion_point(field_release:pbcontent.ContentSpec.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContentSpec::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbcontent.ContentSpec.signature)
}

// uint64 byte_size = 2;
inline void ContentSpec::clear_byte_size() {
  byte_size_ = uint64_t{0u};
}
inline uint64_t ContentSpec::_internal_byte_size() const {
  return byte_size_;
}
inline uint64_t ContentSpec::byte_size() const {
  // @@protoc_insertion_point(field_get:pbcontent.ContentSpec.byte_size)
  return _internal_byte_size();
}
inline void ContentSpec::_internal_set_byte_size(uint64_t value) {
  
  byte_size_ = value;
}
inline void ContentSpec::set_byte_size(uint64_t value) {
  _internal_set_byte_size(value);
  // @@protoc_insertion_point(field_set:pbcontent.ContentSpec.byte_size)
}

// -------------------------------------------------------------------

// ReleasedContentSpec

// string signature = 1;
inline void ReleasedContentSpec::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& ReleasedContentSpec::signature() const {
  // @@protoc_insertion_point(field_get:pbcontent.ReleasedContentSpec.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleasedContentSpec::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbcontent.ReleasedContentSpec.signature)
}
inline std::string* ReleasedContentSpec::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:pbcontent.ReleasedContentSpec.signature)
  return _s;
}
inline const std::string& ReleasedContentSpec::_internal_signature() const {
  return signature_.Get();
}
inline void ReleasedContentSpec::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReleasedContentSpec::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReleasedContentSpec::release_signature() {
  // @@protoc_insertion_point(field_release:pbcontent.ReleasedContentSpec.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReleasedContentSpec::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbcontent.ReleasedContentSpec.signature)
}

// uint64 byte_size = 2;
inline void ReleasedContentSpec::clear_byte_size() {
  byte_size_ = uint64_t{0u};
}
inline uint64_t ReleasedContentSpec::_internal_byte_size() const {
  return byte_size_;
}
inline uint64_t ReleasedContentSpec::byte_size() const {
  // @@protoc_insertion_point(field_get:pbcontent.ReleasedContentSpec.byte_size)
  return _internal_byte_size();
}
inline void ReleasedContentSpec::_internal_set_byte_size(uint64_t value) {
  
  byte_size_ = value;
}
inline void ReleasedContentSpec::set_byte_size(uint64_t value) {
  _internal_set_byte_size(value);
  // @@protoc_insertion_point(field_set:pbcontent.ReleasedContentSpec.byte_size)
}

// string origin_signature = 3;
inline void ReleasedContentSpec::clear_origin_signature() {
  origin_signature_.ClearToEmpty();
}
inline const std::string& ReleasedContentSpec::origin_signature() const {
  // @@protoc_insertion_point(field_get:pbcontent.ReleasedContentSpec.origin_signature)
  return _internal_origin_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReleasedContentSpec::set_origin_signature(ArgT0&& arg0, ArgT... args) {
 
 origin_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbcontent.ReleasedContentSpec.origin_signature)
}
inline std::string* ReleasedContentSpec::mutable_origin_signature() {
  std::string* _s = _internal_mutable_origin_signature();
  // @@protoc_insertion_point(field_mutable:pbcontent.ReleasedContentSpec.origin_signature)
  return _s;
}
inline const std::string& ReleasedContentSpec::_internal_origin_signature() const {
  return origin_signature_.Get();
}
inline void ReleasedContentSpec::_internal_set_origin_signature(const std::string& value) {
  
  origin_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReleasedContentSpec::_internal_mutable_origin_signature() {
  
  return origin_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReleasedContentSpec::release_origin_signature() {
  // @@protoc_insertion_point(field_release:pbcontent.ReleasedContentSpec.origin_signature)
  return origin_signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReleasedContentSpec::set_allocated_origin_signature(std::string* origin_signature) {
  if (origin_signature != nullptr) {
    
  } else {
    
  }
  origin_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin_signature,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_signature_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    origin_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbcontent.ReleasedContentSpec.origin_signature)
}

// uint64 origin_byte_size = 4;
inline void ReleasedContentSpec::clear_origin_byte_size() {
  origin_byte_size_ = uint64_t{0u};
}
inline uint64_t ReleasedContentSpec::_internal_origin_byte_size() const {
  return origin_byte_size_;
}
inline uint64_t ReleasedContentSpec::origin_byte_size() const {
  // @@protoc_insertion_point(field_get:pbcontent.ReleasedContentSpec.origin_byte_size)
  return _internal_origin_byte_size();
}
inline void ReleasedContentSpec::_internal_set_origin_byte_size(uint64_t value) {
  
  origin_byte_size_ = value;
}
inline void ReleasedContentSpec::set_origin_byte_size(uint64_t value) {
  _internal_set_origin_byte_size(value);
  // @@protoc_insertion_point(field_set:pbcontent.ReleasedContentSpec.origin_byte_size)
}

// -------------------------------------------------------------------

// ContentAttachment

// uint32 biz_id = 1;
inline void ContentAttachment::clear_biz_id() {
  biz_id_ = 0u;
}
inline uint32_t ContentAttachment::_internal_biz_id() const {
  return biz_id_;
}
inline uint32_t ContentAttachment::biz_id() const {
  // @@protoc_insertion_point(field_get:pbcontent.ContentAttachment.biz_id)
  return _internal_biz_id();
}
inline void ContentAttachment::_internal_set_biz_id(uint32_t value) {
  
  biz_id_ = value;
}
inline void ContentAttachment::set_biz_id(uint32_t value) {
  _internal_set_biz_id(value);
  // @@protoc_insertion_point(field_set:pbcontent.ContentAttachment.biz_id)
}

// uint32 app_id = 2;
inline void ContentAttachment::clear_app_id() {
  app_id_ = 0u;
}
inline uint32_t ContentAttachment::_internal_app_id() const {
  return app_id_;
}
inline uint32_t ContentAttachment::app_id() const {
  // @@protoc_insertion_point(field_get:pbcontent.ContentAttachment.app_id)
  return _internal_app_id();
}
inline void ContentAttachment::_internal_set_app_id(uint32_t value) {
  
  app_id_ = value;
}
inline void ContentAttachment::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:pbcontent.ContentAttachment.app_id)
}

// uint32 config_item_id = 3;
inline void ContentAttachment::clear_config_item_id() {
  config_item_id_ = 0u;
}
inline uint32_t ContentAttachment::_internal_config_item_id() const {
  return config_item_id_;
}
inline uint32_t ContentAttachment::config_item_id() const {
  // @@protoc_insertion_point(field_get:pbcontent.ContentAttachment.config_item_id)
  return _internal_config_item_id();
}
inline void ContentAttachment::_internal_set_config_item_id(uint32_t value) {
  
  config_item_id_ = value;
}
inline void ContentAttachment::set_config_item_id(uint32_t value) {
  _internal_set_config_item_id(value);
  // @@protoc_insertion_point(field_set:pbcontent.ContentAttachment.config_item_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbcontent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto
