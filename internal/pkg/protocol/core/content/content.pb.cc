// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/protocol/core/content/content.proto

#include "pkg/protocol/core/content/content.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pbcontent {
constexpr Content::Content(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spec_(nullptr)
  , attachment_(nullptr)
  , revision_(nullptr)
  , id_(0u){}
struct ContentDefaultTypeInternal {
  constexpr ContentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentDefaultTypeInternal() {}
  union {
    Content _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentDefaultTypeInternal _Content_default_instance_;
constexpr ContentSpec::ContentSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , byte_size_(uint64_t{0u}){}
struct ContentSpecDefaultTypeInternal {
  constexpr ContentSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentSpecDefaultTypeInternal() {}
  union {
    ContentSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentSpecDefaultTypeInternal _ContentSpec_default_instance_;
constexpr ReleasedContentSpec::ReleasedContentSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , origin_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , byte_size_(uint64_t{0u})
  , origin_byte_size_(uint64_t{0u}){}
struct ReleasedContentSpecDefaultTypeInternal {
  constexpr ReleasedContentSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReleasedContentSpecDefaultTypeInternal() {}
  union {
    ReleasedContentSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReleasedContentSpecDefaultTypeInternal _ReleasedContentSpec_default_instance_;
constexpr ContentAttachment::ContentAttachment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : biz_id_(0u)
  , app_id_(0u)
  , config_item_id_(0u){}
struct ContentAttachmentDefaultTypeInternal {
  constexpr ContentAttachmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContentAttachmentDefaultTypeInternal() {}
  union {
    ContentAttachment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContentAttachmentDefaultTypeInternal _ContentAttachment_default_instance_;
}  // namespace pbcontent
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto = nullptr;

const uint32_t TableStruct_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbcontent::Content, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbcontent::Content, id_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::Content, spec_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::Content, attachment_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::Content, revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbcontent::ContentSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbcontent::ContentSpec, signature_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::ContentSpec, byte_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbcontent::ReleasedContentSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbcontent::ReleasedContentSpec, signature_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::ReleasedContentSpec, byte_size_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::ReleasedContentSpec, origin_signature_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::ReleasedContentSpec, origin_byte_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbcontent::ContentAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pbcontent::ContentAttachment, biz_id_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::ContentAttachment, app_id_),
  PROTOBUF_FIELD_OFFSET(::pbcontent::ContentAttachment, config_item_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pbcontent::Content)},
  { 10, -1, -1, sizeof(::pbcontent::ContentSpec)},
  { 18, -1, -1, sizeof(::pbcontent::ReleasedContentSpec)},
  { 28, -1, -1, sizeof(::pbcontent::ContentAttachment)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbcontent::_Content_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbcontent::_ContentSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbcontent::_ReleasedContentSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pbcontent::_ContentAttachment_default_instance_),
};

const char descriptor_table_protodef_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'pkg/protocol/core/content/content.prot"
  "o\022\tpbcontent\032!pkg/protocol/core/base/bas"
  "e.proto\"\230\001\n\007Content\022\n\n\002id\030\001 \001(\r\022$\n\004spec\030"
  "\002 \001(\0132\026.pbcontent.ContentSpec\0220\n\nattachm"
  "ent\030\003 \001(\0132\034.pbcontent.ContentAttachment\022"
  ")\n\010revision\030\004 \001(\0132\027.pbbase.CreatedRevisi"
  "on\"3\n\013ContentSpec\022\021\n\tsignature\030\001 \001(\t\022\021\n\t"
  "byte_size\030\002 \001(\004\"o\n\023ReleasedContentSpec\022\021"
  "\n\tsignature\030\001 \001(\t\022\021\n\tbyte_size\030\002 \001(\004\022\030\n\020"
  "origin_signature\030\003 \001(\t\022\030\n\020origin_byte_si"
  "ze\030\004 \001(\004\"K\n\021ContentAttachment\022\016\n\006biz_id\030"
  "\001 \001(\r\022\016\n\006app_id\030\002 \001(\r\022\026\n\016config_item_id\030"
  "\003 \001(\rB]Z[github.com/TencentBlueKing/bk-b"
  "cs/bcs-services/bcs-bscp/pkg/protocol/co"
  "re/content;pbcontentb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_deps[1] = {
  &::descriptor_table_pkg_2fprotocol_2fcore_2fbase_2fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto = {
  false, false, 588, descriptor_table_protodef_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto, "pkg/protocol/core/content/content.proto", 
  &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_once, descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto::offsets,
  file_level_metadata_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto, file_level_enum_descriptors_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto, file_level_service_descriptors_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_getter() {
  return &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto(&descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto);
namespace pbcontent {

// ===================================================================

class Content::_Internal {
 public:
  static const ::pbcontent::ContentSpec& spec(const Content* msg);
  static const ::pbcontent::ContentAttachment& attachment(const Content* msg);
  static const ::pbbase::CreatedRevision& revision(const Content* msg);
};

const ::pbcontent::ContentSpec&
Content::_Internal::spec(const Content* msg) {
  return *msg->spec_;
}
const ::pbcontent::ContentAttachment&
Content::_Internal::attachment(const Content* msg) {
  return *msg->attachment_;
}
const ::pbbase::CreatedRevision&
Content::_Internal::revision(const Content* msg) {
  return *msg->revision_;
}
void Content::clear_revision() {
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
}
Content::Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbcontent.Content)
}
Content::Content(const Content& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    spec_ = new ::pbcontent::ContentSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_attachment()) {
    attachment_ = new ::pbcontent::ContentAttachment(*from.attachment_);
  } else {
    attachment_ = nullptr;
  }
  if (from._internal_has_revision()) {
    revision_ = new ::pbbase::CreatedRevision(*from.revision_);
  } else {
    revision_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:pbcontent.Content)
}

inline void Content::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(id_));
}

Content::~Content() {
  // @@protoc_insertion_point(destructor:pbcontent.Content)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Content::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete attachment_;
  if (this != internal_default_instance()) delete revision_;
}

void Content::ArenaDtor(void* object) {
  Content* _this = reinterpret_cast< Content* >(object);
  (void)_this;
}
void Content::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Content::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Content::Clear() {
// @@protoc_insertion_point(message_clear_start:pbcontent.Content)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && revision_ != nullptr) {
    delete revision_;
  }
  revision_ = nullptr;
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Content::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbcontent.ContentSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbcontent.ContentAttachment attachment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attachment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .pbbase.CreatedRevision revision = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_revision(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Content::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcontent.Content)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .pbcontent.ContentSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spec(this), target, stream);
  }

  // .pbcontent.ContentAttachment attachment = 3;
  if (this->_internal_has_attachment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attachment(this), target, stream);
  }

  // .pbbase.CreatedRevision revision = 4;
  if (this->_internal_has_revision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::revision(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcontent.Content)
  return target;
}

size_t Content::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbcontent.Content)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pbcontent.ContentSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .pbcontent.ContentAttachment attachment = 3;
  if (this->_internal_has_attachment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attachment_);
  }

  // .pbbase.CreatedRevision revision = 4;
  if (this->_internal_has_revision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *revision_);
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Content::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Content::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Content::GetClassData() const { return &_class_data_; }

void Content::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Content *>(to)->MergeFrom(
      static_cast<const Content &>(from));
}


void Content::MergeFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbcontent.Content)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::pbcontent::ContentSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_attachment()) {
    _internal_mutable_attachment()->::pbcontent::ContentAttachment::MergeFrom(from._internal_attachment());
  }
  if (from._internal_has_revision()) {
    _internal_mutable_revision()->::pbbase::CreatedRevision::MergeFrom(from._internal_revision());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Content::CopyFrom(const Content& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbcontent.Content)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Content::IsInitialized() const {
  return true;
}

void Content::InternalSwap(Content* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Content, id_)
      + sizeof(Content::id_)
      - PROTOBUF_FIELD_OFFSET(Content, spec_)>(
          reinterpret_cast<char*>(&spec_),
          reinterpret_cast<char*>(&other->spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Content::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto[0]);
}

// ===================================================================

class ContentSpec::_Internal {
 public:
};

ContentSpec::ContentSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbcontent.ContentSpec)
}
ContentSpec::ContentSpec(const ContentSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  byte_size_ = from.byte_size_;
  // @@protoc_insertion_point(copy_constructor:pbcontent.ContentSpec)
}

inline void ContentSpec::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
byte_size_ = uint64_t{0u};
}

ContentSpec::~ContentSpec() {
  // @@protoc_insertion_point(destructor:pbcontent.ContentSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContentSpec::ArenaDtor(void* object) {
  ContentSpec* _this = reinterpret_cast< ContentSpec* >(object);
  (void)_this;
}
void ContentSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:pbcontent.ContentSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  byte_size_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbcontent.ContentSpec.signature"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 byte_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          byte_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcontent.ContentSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string signature = 1;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbcontent.ContentSpec.signature");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // uint64 byte_size = 2;
  if (this->_internal_byte_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_byte_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcontent.ContentSpec)
  return target;
}

size_t ContentSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbcontent.ContentSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // uint64 byte_size = 2;
  if (this->_internal_byte_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_byte_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentSpec::GetClassData() const { return &_class_data_; }

void ContentSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentSpec *>(to)->MergeFrom(
      static_cast<const ContentSpec &>(from));
}


void ContentSpec::MergeFrom(const ContentSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbcontent.ContentSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from._internal_byte_size() != 0) {
    _internal_set_byte_size(from._internal_byte_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentSpec::CopyFrom(const ContentSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbcontent.ContentSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentSpec::IsInitialized() const {
  return true;
}

void ContentSpec::InternalSwap(ContentSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  swap(byte_size_, other->byte_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto[1]);
}

// ===================================================================

class ReleasedContentSpec::_Internal {
 public:
};

ReleasedContentSpec::ReleasedContentSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbcontent.ReleasedContentSpec)
}
ReleasedContentSpec::ReleasedContentSpec(const ReleasedContentSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  origin_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_origin_signature().empty()) {
    origin_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_origin_signature(), 
      GetArenaForAllocation());
  }
  ::memcpy(&byte_size_, &from.byte_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_byte_size_) -
    reinterpret_cast<char*>(&byte_size_)) + sizeof(origin_byte_size_));
  // @@protoc_insertion_point(copy_constructor:pbcontent.ReleasedContentSpec)
}

inline void ReleasedContentSpec::SharedCtor() {
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
origin_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&byte_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_byte_size_) -
    reinterpret_cast<char*>(&byte_size_)) + sizeof(origin_byte_size_));
}

ReleasedContentSpec::~ReleasedContentSpec() {
  // @@protoc_insertion_point(destructor:pbcontent.ReleasedContentSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReleasedContentSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  origin_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReleasedContentSpec::ArenaDtor(void* object) {
  ReleasedContentSpec* _this = reinterpret_cast< ReleasedContentSpec* >(object);
  (void)_this;
}
void ReleasedContentSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReleasedContentSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReleasedContentSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:pbcontent.ReleasedContentSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmpty();
  origin_signature_.ClearToEmpty();
  ::memset(&byte_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_byte_size_) -
      reinterpret_cast<char*>(&byte_size_)) + sizeof(origin_byte_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleasedContentSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbcontent.ReleasedContentSpec.signature"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 byte_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          byte_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string origin_signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_origin_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pbcontent.ReleasedContentSpec.origin_signature"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 origin_byte_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          origin_byte_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleasedContentSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcontent.ReleasedContentSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string signature = 1;
  if (!this->_internal_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbcontent.ReleasedContentSpec.signature");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // uint64 byte_size = 2;
  if (this->_internal_byte_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_byte_size(), target);
  }

  // string origin_signature = 3;
  if (!this->_internal_origin_signature().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_origin_signature().data(), static_cast<int>(this->_internal_origin_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pbcontent.ReleasedContentSpec.origin_signature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_origin_signature(), target);
  }

  // uint64 origin_byte_size = 4;
  if (this->_internal_origin_byte_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_origin_byte_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcontent.ReleasedContentSpec)
  return target;
}

size_t ReleasedContentSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbcontent.ReleasedContentSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signature = 1;
  if (!this->_internal_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  // string origin_signature = 3;
  if (!this->_internal_origin_signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origin_signature());
  }

  // uint64 byte_size = 2;
  if (this->_internal_byte_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_byte_size());
  }

  // uint64 origin_byte_size = 4;
  if (this->_internal_origin_byte_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_origin_byte_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleasedContentSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReleasedContentSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleasedContentSpec::GetClassData() const { return &_class_data_; }

void ReleasedContentSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReleasedContentSpec *>(to)->MergeFrom(
      static_cast<const ReleasedContentSpec &>(from));
}


void ReleasedContentSpec::MergeFrom(const ReleasedContentSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbcontent.ReleasedContentSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (!from._internal_origin_signature().empty()) {
    _internal_set_origin_signature(from._internal_origin_signature());
  }
  if (from._internal_byte_size() != 0) {
    _internal_set_byte_size(from._internal_byte_size());
  }
  if (from._internal_origin_byte_size() != 0) {
    _internal_set_origin_byte_size(from._internal_origin_byte_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleasedContentSpec::CopyFrom(const ReleasedContentSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbcontent.ReleasedContentSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleasedContentSpec::IsInitialized() const {
  return true;
}

void ReleasedContentSpec::InternalSwap(ReleasedContentSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, lhs_arena,
      &other->signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &origin_signature_, lhs_arena,
      &other->origin_signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReleasedContentSpec, origin_byte_size_)
      + sizeof(ReleasedContentSpec::origin_byte_size_)
      - PROTOBUF_FIELD_OFFSET(ReleasedContentSpec, byte_size_)>(
          reinterpret_cast<char*>(&byte_size_),
          reinterpret_cast<char*>(&other->byte_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleasedContentSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto[2]);
}

// ===================================================================

class ContentAttachment::_Internal {
 public:
};

ContentAttachment::ContentAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pbcontent.ContentAttachment)
}
ContentAttachment::ContentAttachment(const ContentAttachment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&biz_id_, &from.biz_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&config_item_id_) -
    reinterpret_cast<char*>(&biz_id_)) + sizeof(config_item_id_));
  // @@protoc_insertion_point(copy_constructor:pbcontent.ContentAttachment)
}

inline void ContentAttachment::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&biz_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&config_item_id_) -
    reinterpret_cast<char*>(&biz_id_)) + sizeof(config_item_id_));
}

ContentAttachment::~ContentAttachment() {
  // @@protoc_insertion_point(destructor:pbcontent.ContentAttachment)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContentAttachment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ContentAttachment::ArenaDtor(void* object) {
  ContentAttachment* _this = reinterpret_cast< ContentAttachment* >(object);
  (void)_this;
}
void ContentAttachment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContentAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContentAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:pbcontent.ContentAttachment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&biz_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_item_id_) -
      reinterpret_cast<char*>(&biz_id_)) + sizeof(config_item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContentAttachment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 biz_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          biz_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 config_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          config_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContentAttachment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbcontent.ContentAttachment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 biz_id = 1;
  if (this->_internal_biz_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_biz_id(), target);
  }

  // uint32 app_id = 2;
  if (this->_internal_app_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // uint32 config_item_id = 3;
  if (this->_internal_config_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_config_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbcontent.ContentAttachment)
  return target;
}

size_t ContentAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbcontent.ContentAttachment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 biz_id = 1;
  if (this->_internal_biz_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_biz_id());
  }

  // uint32 app_id = 2;
  if (this->_internal_app_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
  }

  // uint32 config_item_id = 3;
  if (this->_internal_config_item_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_config_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContentAttachment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContentAttachment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContentAttachment::GetClassData() const { return &_class_data_; }

void ContentAttachment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ContentAttachment *>(to)->MergeFrom(
      static_cast<const ContentAttachment &>(from));
}


void ContentAttachment::MergeFrom(const ContentAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbcontent.ContentAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_biz_id() != 0) {
    _internal_set_biz_id(from._internal_biz_id());
  }
  if (from._internal_app_id() != 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from._internal_config_item_id() != 0) {
    _internal_set_config_item_id(from._internal_config_item_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContentAttachment::CopyFrom(const ContentAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbcontent.ContentAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAttachment::IsInitialized() const {
  return true;
}

void ContentAttachment::InternalSwap(ContentAttachment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContentAttachment, config_item_id_)
      + sizeof(ContentAttachment::config_item_id_)
      - PROTOBUF_FIELD_OFFSET(ContentAttachment, biz_id_)>(
          reinterpret_cast<char*>(&biz_id_),
          reinterpret_cast<char*>(&other->biz_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ContentAttachment::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_getter, &descriptor_table_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto_once,
      file_level_metadata_pkg_2fprotocol_2fcore_2fcontent_2fcontent_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pbcontent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pbcontent::Content* Arena::CreateMaybeMessage< ::pbcontent::Content >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbcontent::Content >(arena);
}
template<> PROTOBUF_NOINLINE ::pbcontent::ContentSpec* Arena::CreateMaybeMessage< ::pbcontent::ContentSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbcontent::ContentSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::pbcontent::ReleasedContentSpec* Arena::CreateMaybeMessage< ::pbcontent::ReleasedContentSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbcontent::ReleasedContentSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::pbcontent::ContentAttachment* Arena::CreateMaybeMessage< ::pbcontent::ContentAttachment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pbcontent::ContentAttachment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
