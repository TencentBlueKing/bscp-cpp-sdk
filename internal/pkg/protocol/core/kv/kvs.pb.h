// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pkg/protocol/core/kv/kvs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pkg/protocol/core/base/base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto;
namespace pbkv {
class Kv;
struct KvDefaultTypeInternal;
extern KvDefaultTypeInternal _Kv_default_instance_;
class KvAttachment;
struct KvAttachmentDefaultTypeInternal;
extern KvAttachmentDefaultTypeInternal _KvAttachment_default_instance_;
class KvSpec;
struct KvSpecDefaultTypeInternal;
extern KvSpecDefaultTypeInternal _KvSpec_default_instance_;
}  // namespace pbkv
PROTOBUF_NAMESPACE_OPEN
template<> ::pbkv::Kv* Arena::CreateMaybeMessage<::pbkv::Kv>(Arena*);
template<> ::pbkv::KvAttachment* Arena::CreateMaybeMessage<::pbkv::KvAttachment>(Arena*);
template<> ::pbkv::KvSpec* Arena::CreateMaybeMessage<::pbkv::KvSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbkv {

// ===================================================================

class Kv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbkv.Kv) */ {
 public:
  inline Kv() : Kv(nullptr) {}
  ~Kv() override;
  explicit constexpr Kv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Kv(const Kv& from);
  Kv(Kv&& from) noexcept
    : Kv() {
    *this = ::std::move(from);
  }

  inline Kv& operator=(const Kv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kv& operator=(Kv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Kv& default_instance() {
    return *internal_default_instance();
  }
  static inline const Kv* internal_default_instance() {
    return reinterpret_cast<const Kv*>(
               &_Kv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Kv& a, Kv& b) {
    a.Swap(&b);
  }
  inline void Swap(Kv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Kv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Kv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Kv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Kv& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbkv.Kv";
  }
  protected:
  explicit Kv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvStateFieldNumber = 2,
    kSpecFieldNumber = 3,
    kAttachmentFieldNumber = 4,
    kRevisionFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // string kv_state = 2;
  void clear_kv_state();
  const std::string& kv_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kv_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kv_state();
  PROTOBUF_NODISCARD std::string* release_kv_state();
  void set_allocated_kv_state(std::string* kv_state);
  private:
  const std::string& _internal_kv_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kv_state(const std::string& value);
  std::string* _internal_mutable_kv_state();
  public:

  // .pbkv.KvSpec spec = 3;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::pbkv::KvSpec& spec() const;
  PROTOBUF_NODISCARD ::pbkv::KvSpec* release_spec();
  ::pbkv::KvSpec* mutable_spec();
  void set_allocated_spec(::pbkv::KvSpec* spec);
  private:
  const ::pbkv::KvSpec& _internal_spec() const;
  ::pbkv::KvSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::pbkv::KvSpec* spec);
  ::pbkv::KvSpec* unsafe_arena_release_spec();

  // .pbkv.KvAttachment attachment = 4;
  bool has_attachment() const;
  private:
  bool _internal_has_attachment() const;
  public:
  void clear_attachment();
  const ::pbkv::KvAttachment& attachment() const;
  PROTOBUF_NODISCARD ::pbkv::KvAttachment* release_attachment();
  ::pbkv::KvAttachment* mutable_attachment();
  void set_allocated_attachment(::pbkv::KvAttachment* attachment);
  private:
  const ::pbkv::KvAttachment& _internal_attachment() const;
  ::pbkv::KvAttachment* _internal_mutable_attachment();
  public:
  void unsafe_arena_set_allocated_attachment(
      ::pbkv::KvAttachment* attachment);
  ::pbkv::KvAttachment* unsafe_arena_release_attachment();

  // .pbbase.Revision revision = 5;
  bool has_revision() const;
  private:
  bool _internal_has_revision() const;
  public:
  void clear_revision();
  const ::pbbase::Revision& revision() const;
  PROTOBUF_NODISCARD ::pbbase::Revision* release_revision();
  ::pbbase::Revision* mutable_revision();
  void set_allocated_revision(::pbbase::Revision* revision);
  private:
  const ::pbbase::Revision& _internal_revision() const;
  ::pbbase::Revision* _internal_mutable_revision();
  public:
  void unsafe_arena_set_allocated_revision(
      ::pbbase::Revision* revision);
  ::pbbase::Revision* unsafe_arena_release_revision();

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbkv.Kv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kv_state_;
  ::pbkv::KvSpec* spec_;
  ::pbkv::KvAttachment* attachment_;
  ::pbbase::Revision* revision_;
  uint32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto;
};
// -------------------------------------------------------------------

class KvSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbkv.KvSpec) */ {
 public:
  inline KvSpec() : KvSpec(nullptr) {}
  ~KvSpec() override;
  explicit constexpr KvSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvSpec(const KvSpec& from);
  KvSpec(KvSpec&& from) noexcept
    : KvSpec() {
    *this = ::std::move(from);
  }

  inline KvSpec& operator=(const KvSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvSpec& operator=(KvSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvSpec* internal_default_instance() {
    return reinterpret_cast<const KvSpec*>(
               &_KvSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KvSpec& a, KvSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(KvSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KvSpec& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbkv.KvSpec";
  }
  protected:
  explicit KvSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kKvTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string kv_type = 2;
  void clear_kv_type();
  const std::string& kv_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kv_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kv_type();
  PROTOBUF_NODISCARD std::string* release_kv_type();
  void set_allocated_kv_type(std::string* kv_type);
  private:
  const std::string& _internal_kv_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kv_type(const std::string& value);
  std::string* _internal_mutable_kv_type();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:pbkv.KvSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kv_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto;
};
// -------------------------------------------------------------------

class KvAttachment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbkv.KvAttachment) */ {
 public:
  inline KvAttachment() : KvAttachment(nullptr) {}
  ~KvAttachment() override;
  explicit constexpr KvAttachment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KvAttachment(const KvAttachment& from);
  KvAttachment(KvAttachment&& from) noexcept
    : KvAttachment() {
    *this = ::std::move(from);
  }

  inline KvAttachment& operator=(const KvAttachment& from) {
    CopyFrom(from);
    return *this;
  }
  inline KvAttachment& operator=(KvAttachment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KvAttachment& default_instance() {
    return *internal_default_instance();
  }
  static inline const KvAttachment* internal_default_instance() {
    return reinterpret_cast<const KvAttachment*>(
               &_KvAttachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KvAttachment& a, KvAttachment& b) {
    a.Swap(&b);
  }
  inline void Swap(KvAttachment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KvAttachment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KvAttachment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KvAttachment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KvAttachment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KvAttachment& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KvAttachment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbkv.KvAttachment";
  }
  protected:
  explicit KvAttachment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBizIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
  };
  // uint32 biz_id = 1;
  void clear_biz_id();
  uint32_t biz_id() const;
  void set_biz_id(uint32_t value);
  private:
  uint32_t _internal_biz_id() const;
  void _internal_set_biz_id(uint32_t value);
  public:

  // uint32 app_id = 2;
  void clear_app_id();
  uint32_t app_id() const;
  void set_app_id(uint32_t value);
  private:
  uint32_t _internal_app_id() const;
  void _internal_set_app_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pbkv.KvAttachment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t biz_id_;
  uint32_t app_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Kv

// uint32 id = 1;
inline void Kv::clear_id() {
  id_ = 0u;
}
inline uint32_t Kv::_internal_id() const {
  return id_;
}
inline uint32_t Kv::id() const {
  // @@protoc_insertion_point(field_get:pbkv.Kv.id)
  return _internal_id();
}
inline void Kv::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void Kv::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pbkv.Kv.id)
}

// string kv_state = 2;
inline void Kv::clear_kv_state() {
  kv_state_.ClearToEmpty();
}
inline const std::string& Kv::kv_state() const {
  // @@protoc_insertion_point(field_get:pbkv.Kv.kv_state)
  return _internal_kv_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Kv::set_kv_state(ArgT0&& arg0, ArgT... args) {
 
 kv_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbkv.Kv.kv_state)
}
inline std::string* Kv::mutable_kv_state() {
  std::string* _s = _internal_mutable_kv_state();
  // @@protoc_insertion_point(field_mutable:pbkv.Kv.kv_state)
  return _s;
}
inline const std::string& Kv::_internal_kv_state() const {
  return kv_state_.Get();
}
inline void Kv::_internal_set_kv_state(const std::string& value) {
  
  kv_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Kv::_internal_mutable_kv_state() {
  
  return kv_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Kv::release_kv_state() {
  // @@protoc_insertion_point(field_release:pbkv.Kv.kv_state)
  return kv_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Kv::set_allocated_kv_state(std::string* kv_state) {
  if (kv_state != nullptr) {
    
  } else {
    
  }
  kv_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kv_state,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kv_state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kv_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbkv.Kv.kv_state)
}

// .pbkv.KvSpec spec = 3;
inline bool Kv::_internal_has_spec() const {
  return this != internal_default_instance() && spec_ != nullptr;
}
inline bool Kv::has_spec() const {
  return _internal_has_spec();
}
inline void Kv::clear_spec() {
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
}
inline const ::pbkv::KvSpec& Kv::_internal_spec() const {
  const ::pbkv::KvSpec* p = spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbkv::KvSpec&>(
      ::pbkv::_KvSpec_default_instance_);
}
inline const ::pbkv::KvSpec& Kv::spec() const {
  // @@protoc_insertion_point(field_get:pbkv.Kv.spec)
  return _internal_spec();
}
inline void Kv::unsafe_arena_set_allocated_spec(
    ::pbkv::KvSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spec_);
  }
  spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbkv.Kv.spec)
}
inline ::pbkv::KvSpec* Kv::release_spec() {
  
  ::pbkv::KvSpec* temp = spec_;
  spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbkv::KvSpec* Kv::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:pbkv.Kv.spec)
  
  ::pbkv::KvSpec* temp = spec_;
  spec_ = nullptr;
  return temp;
}
inline ::pbkv::KvSpec* Kv::_internal_mutable_spec() {
  
  if (spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbkv::KvSpec>(GetArenaForAllocation());
    spec_ = p;
  }
  return spec_;
}
inline ::pbkv::KvSpec* Kv::mutable_spec() {
  ::pbkv::KvSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:pbkv.Kv.spec)
  return _msg;
}
inline void Kv::set_allocated_spec(::pbkv::KvSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbkv::KvSpec>::GetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:pbkv.Kv.spec)
}

// .pbkv.KvAttachment attachment = 4;
inline bool Kv::_internal_has_attachment() const {
  return this != internal_default_instance() && attachment_ != nullptr;
}
inline bool Kv::has_attachment() const {
  return _internal_has_attachment();
}
inline void Kv::clear_attachment() {
  if (GetArenaForAllocation() == nullptr && attachment_ != nullptr) {
    delete attachment_;
  }
  attachment_ = nullptr;
}
inline const ::pbkv::KvAttachment& Kv::_internal_attachment() const {
  const ::pbkv::KvAttachment* p = attachment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbkv::KvAttachment&>(
      ::pbkv::_KvAttachment_default_instance_);
}
inline const ::pbkv::KvAttachment& Kv::attachment() const {
  // @@protoc_insertion_point(field_get:pbkv.Kv.attachment)
  return _internal_attachment();
}
inline void Kv::unsafe_arena_set_allocated_attachment(
    ::pbkv::KvAttachment* attachment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attachment_);
  }
  attachment_ = attachment;
  if (attachment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbkv.Kv.attachment)
}
inline ::pbkv::KvAttachment* Kv::release_attachment() {
  
  ::pbkv::KvAttachment* temp = attachment_;
  attachment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbkv::KvAttachment* Kv::unsafe_arena_release_attachment() {
  // @@protoc_insertion_point(field_release:pbkv.Kv.attachment)
  
  ::pbkv::KvAttachment* temp = attachment_;
  attachment_ = nullptr;
  return temp;
}
inline ::pbkv::KvAttachment* Kv::_internal_mutable_attachment() {
  
  if (attachment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbkv::KvAttachment>(GetArenaForAllocation());
    attachment_ = p;
  }
  return attachment_;
}
inline ::pbkv::KvAttachment* Kv::mutable_attachment() {
  ::pbkv::KvAttachment* _msg = _internal_mutable_attachment();
  // @@protoc_insertion_point(field_mutable:pbkv.Kv.attachment)
  return _msg;
}
inline void Kv::set_allocated_attachment(::pbkv::KvAttachment* attachment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attachment_;
  }
  if (attachment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pbkv::KvAttachment>::GetOwningArena(attachment);
    if (message_arena != submessage_arena) {
      attachment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attachment, submessage_arena);
    }
    
  } else {
    
  }
  attachment_ = attachment;
  // @@protoc_insertion_point(field_set_allocated:pbkv.Kv.attachment)
}

// .pbbase.Revision revision = 5;
inline bool Kv::_internal_has_revision() const {
  return this != internal_default_instance() && revision_ != nullptr;
}
inline bool Kv::has_revision() const {
  return _internal_has_revision();
}
inline const ::pbbase::Revision& Kv::_internal_revision() const {
  const ::pbbase::Revision* p = revision_;
  return p != nullptr ? *p : reinterpret_cast<const ::pbbase::Revision&>(
      ::pbbase::_Revision_default_instance_);
}
inline const ::pbbase::Revision& Kv::revision() const {
  // @@protoc_insertion_point(field_get:pbkv.Kv.revision)
  return _internal_revision();
}
inline void Kv::unsafe_arena_set_allocated_revision(
    ::pbbase::Revision* revision) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  revision_ = revision;
  if (revision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pbkv.Kv.revision)
}
inline ::pbbase::Revision* Kv::release_revision() {
  
  ::pbbase::Revision* temp = revision_;
  revision_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pbbase::Revision* Kv::unsafe_arena_release_revision() {
  // @@protoc_insertion_point(field_release:pbkv.Kv.revision)
  
  ::pbbase::Revision* temp = revision_;
  revision_ = nullptr;
  return temp;
}
inline ::pbbase::Revision* Kv::_internal_mutable_revision() {
  
  if (revision_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbbase::Revision>(GetArenaForAllocation());
    revision_ = p;
  }
  return revision_;
}
inline ::pbbase::Revision* Kv::mutable_revision() {
  ::pbbase::Revision* _msg = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:pbkv.Kv.revision)
  return _msg;
}
inline void Kv::set_allocated_revision(::pbbase::Revision* revision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision_);
  }
  if (revision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(revision));
    if (message_arena != submessage_arena) {
      revision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, revision, submessage_arena);
    }
    
  } else {
    
  }
  revision_ = revision;
  // @@protoc_insertion_point(field_set_allocated:pbkv.Kv.revision)
}

// -------------------------------------------------------------------

// KvSpec

// string key = 1;
inline void KvSpec::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KvSpec::key() const {
  // @@protoc_insertion_point(field_get:pbkv.KvSpec.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvSpec::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbkv.KvSpec.key)
}
inline std::string* KvSpec::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:pbkv.KvSpec.key)
  return _s;
}
inline const std::string& KvSpec::_internal_key() const {
  return key_.Get();
}
inline void KvSpec::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvSpec::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvSpec::release_key() {
  // @@protoc_insertion_point(field_release:pbkv.KvSpec.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvSpec::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbkv.KvSpec.key)
}

// string kv_type = 2;
inline void KvSpec::clear_kv_type() {
  kv_type_.ClearToEmpty();
}
inline const std::string& KvSpec::kv_type() const {
  // @@protoc_insertion_point(field_get:pbkv.KvSpec.kv_type)
  return _internal_kv_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvSpec::set_kv_type(ArgT0&& arg0, ArgT... args) {
 
 kv_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbkv.KvSpec.kv_type)
}
inline std::string* KvSpec::mutable_kv_type() {
  std::string* _s = _internal_mutable_kv_type();
  // @@protoc_insertion_point(field_mutable:pbkv.KvSpec.kv_type)
  return _s;
}
inline const std::string& KvSpec::_internal_kv_type() const {
  return kv_type_.Get();
}
inline void KvSpec::_internal_set_kv_type(const std::string& value) {
  
  kv_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvSpec::_internal_mutable_kv_type() {
  
  return kv_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvSpec::release_kv_type() {
  // @@protoc_insertion_point(field_release:pbkv.KvSpec.kv_type)
  return kv_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvSpec::set_allocated_kv_type(std::string* kv_type) {
  if (kv_type != nullptr) {
    
  } else {
    
  }
  kv_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kv_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kv_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kv_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbkv.KvSpec.kv_type)
}

// string value = 3;
inline void KvSpec::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KvSpec::value() const {
  // @@protoc_insertion_point(field_get:pbkv.KvSpec.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KvSpec::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pbkv.KvSpec.value)
}
inline std::string* KvSpec::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pbkv.KvSpec.value)
  return _s;
}
inline const std::string& KvSpec::_internal_value() const {
  return value_.Get();
}
inline void KvSpec::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KvSpec::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KvSpec::release_value() {
  // @@protoc_insertion_point(field_release:pbkv.KvSpec.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KvSpec::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pbkv.KvSpec.value)
}

// -------------------------------------------------------------------

// KvAttachment

// uint32 biz_id = 1;
inline void KvAttachment::clear_biz_id() {
  biz_id_ = 0u;
}
inline uint32_t KvAttachment::_internal_biz_id() const {
  return biz_id_;
}
inline uint32_t KvAttachment::biz_id() const {
  // @@protoc_insertion_point(field_get:pbkv.KvAttachment.biz_id)
  return _internal_biz_id();
}
inline void KvAttachment::_internal_set_biz_id(uint32_t value) {
  
  biz_id_ = value;
}
inline void KvAttachment::set_biz_id(uint32_t value) {
  _internal_set_biz_id(value);
  // @@protoc_insertion_point(field_set:pbkv.KvAttachment.biz_id)
}

// uint32 app_id = 2;
inline void KvAttachment::clear_app_id() {
  app_id_ = 0u;
}
inline uint32_t KvAttachment::_internal_app_id() const {
  return app_id_;
}
inline uint32_t KvAttachment::app_id() const {
  // @@protoc_insertion_point(field_get:pbkv.KvAttachment.app_id)
  return _internal_app_id();
}
inline void KvAttachment::_internal_set_app_id(uint32_t value) {
  
  app_id_ = value;
}
inline void KvAttachment::set_app_id(uint32_t value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:pbkv.KvAttachment.app_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbkv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pkg_2fprotocol_2fcore_2fkv_2fkvs_2eproto
